{"version":3,"file":"static/js/912.a31803e6.chunk.js","mappings":"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","sources":["API/axiosInstance.js","services/authService.js","services/EventService.js","components/EventCalendar/index.js","views/ui/EventCalendar.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL, // ใช้ Environment Variable ที่ชื่อ APP_API_URL\r\n  headers: {\r\n    Accept: \"application/json\", // แก้ไข Content-Type ให้เป็น application/json\r\n    \"X-API-Key\": process.env.REACT_APP_API_KEY, // เพิ่ม API Key เข้าไปใน header หากต้องการ\r\n    \"X-Secret\": process.env.REACT_APP_SECRET // เพิ่ม Secret Key เข้าไปใน header หากต้องการ\r\n  },\r\n\r\n  \r\n  \r\n});\r\n\r\nexport default API;\r\n","// authService.js\r\nimport API from '../API/axiosInstance';\r\n\r\nconst AuthService = {\r\n  async getUserData() {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        const response = await API.get('/auth/user');\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n        throw error;\r\n      }\r\n    }\r\n  },\r\n\r\n  async UpdateUser(userId, editedData) {\r\n    const token = localStorage.getItem('token');\r\n    try {\r\n      if (token) {\r\n        const response = await API.put(`/auth/user/${userId}`, editedData);\r\n        console.log(\"Update User data\", response.data);\r\n        return response.data.user;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating user data:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default AuthService;\r\n","// productService.js\r\nimport API from \"../API/axiosInstance\";\r\nimport AuthService from \"./authService\";\r\n\r\nconst EventService = {\r\n  async getEvents() {\r\n    \r\n    try {\r\n      const userData = await AuthService.getUserData(); // ดึงข้อมูลผู้ใช้และ Token\r\n      if (userData) {\r\n        // const response = await API.get(`/product?search=${searchTerm}`); // เรียกข้อมูลสินค้าโดยใช้ ID ของผู้ใช้\r\n        const response = await API.get(`/events`); // เรียกข้อมูลสินค้าโดยใช้ ID ของผู้ใช้\r\n\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching user events:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\r\n  async LineNotify() {\r\n    \r\n    try {\r\n      const userData = await AuthService.getUserData(); // ดึงข้อมูลผู้ใช้และ Token\r\n      if (userData) {\r\n        await API.get(`/events/linenotify`); \r\n\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching user linenotify:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n//   async getUserDeleteProducts() {\r\n    \r\n//     try {\r\n//       const userData = await AuthService.getUserData(); // ดึงข้อมูลผู้ใช้และ Token\r\n//       if (userData) {\r\n//         // const response = await API.get(`/product?search=${searchTerm}`); // เรียกข้อมูลสินค้าโดยใช้ ID ของผู้ใช้\r\n//         const response = await API.get(`/product`); // เรียกข้อมูลสินค้าโดยใช้ ID ของผู้ใช้\r\n//         // const response = await API.get(`/product?page=${currentPage}&per_page=${perPage}`); // เรียกข้อมูลสินค้าโดยใช้ ID ของผู้ใช้\r\n\r\n//         return response.data;\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching user products:\", error);\r\n//       throw error;\r\n//     }\r\n//   },\r\n\r\n  async AddEvent(newEvent) {\r\n    try {\r\n      const userData = await AuthService.getUserData(); // ดึงข้อมูลผู้ใช้และ Token\r\n\r\n      if (userData) {\r\n        const response = await API.post(`/events`, newEvent); // เพิ่มข้อมูลสินค้า\r\n\r\n        return response.data.events;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching Event:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async UpdateEvent(id, updatedEvent) {\r\n    try {\r\n      const userData = await AuthService.getUserData(); // ดึงข้อมูลผู้ใช้และ Token\r\n\r\n      if (userData) {\r\n        const response = await API.put(`/events/${id}`, updatedEvent); // เพิ่มข้อมูลสินค้า\r\n\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching user event:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async DeleteEvent(id) {\r\n    try {\r\n      const userData = await AuthService.getUserData(); // ดึงข้อมูลผู้ใช้และ Token\r\n      if (userData) {\r\n        const response = await API.delete(`/events/${id}`); // ลบข้อมูลสินค้า\r\n\r\n        console.log(\"Delete Event Success\", response.data);\r\n\r\n        // return response.data.userProducts;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error Delete event:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n\r\n  // เพิ่มฟังก์ชันสำหรับการสร้าง, อัปเดต, และลบสินค้าตามที่ต้องการ\r\n};\r\n\r\nexport default EventService;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\"; // for selectable\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\"; // for dayClick\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\"; // Import Axios library\r\nimport {\r\n  PDFViewer,\r\n  Document,\r\n  Page,\r\n  Text,\r\n  View,\r\n  StyleSheet,\r\n} from \"@react-pdf/renderer\";\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; // Import FontAwesomeIcon component\r\n\r\nimport { faBell, faLineChart, faPersonDotsFromLine } from \"@fortawesome/free-solid-svg-icons\"; // Import ไอคอนต่างๆ\r\n\r\nimport EventService from \"../../services/EventService\";\r\n\r\n// Styles for PDF\r\nconst styles = StyleSheet.create({\r\n  page: {\r\n    flexDirection: \"row\",\r\n    backgroundColor: \"#ffffff\",\r\n    padding: 10,\r\n  },\r\n  section: {\r\n    margin: 10,\r\n    padding: 10,\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    marginBottom: 10,\r\n  },\r\n  event: {\r\n    fontSize: 16,\r\n    marginBottom: 5,\r\n  },\r\n});\r\n\r\nfunction EventCalendar() {\r\n  const [events, setEvents] = useState([]);\r\n  const [defaultTextColor, setDefaultTextColor] = useState(\"#FFFFFF\"); // สีข้อความเริ่มต้น\r\n  const [defaultBackgroundColor, setDefaultBackgroundColor] =\r\n    useState(\"#FF638E\"); // สีพื้นหลังเริ่มต้น\r\n  const [defaultFontSize, setDefaultFontSize] = useState(12); // สีพื้นหลังเริ่มต้น\r\n\r\n  // Function to generate PDF content from calendar events\r\n  const generatePdfContent = (events) => (\r\n    <Document>\r\n      <Page size=\"A4\" style={styles.page}>\r\n        <View style={styles.section}>\r\n          <Text style={styles.title}>Event Calendar</Text>\r\n          {events.map((event) => (\r\n            <Text key={event.id} style={styles.event}>\r\n              Title: {event.title}, Date: {event.date}\r\n            </Text>\r\n          ))}\r\n        </View>\r\n      </Page>\r\n    </Document>\r\n  );\r\n\r\n  const handleExportPdf = () => {\r\n    const pdfContent = generatePdfContent(events); // สร้างเนื้อหา PDF\r\n    // สร้าง URL สำหรับเปิดไฟล์ PDF\r\n    const blob = new Blob([pdfContent], { type: \"application/pdf\" });\r\n    const url = URL.createObjectURL(blob);\r\n    // เปิดไฟล์ PDF ในหน้าต่างใหม่\r\n    window.open(url);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEventsFromDB(); // Fetch events when component mounts\r\n  }, []);\r\n\r\n  // Function to save event to database\r\n  const saveEventToDB = async (newEvent) => {\r\n    try {\r\n      // Send POST request to API endpoint\r\n      await EventService.AddEvent(newEvent);\r\n    } catch (error) {\r\n      console.error(\"Error saving event:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to fetch events from database\r\n  const fetchEventsFromDB = async () => {\r\n    try {\r\n      const res = await EventService.getEvents();\r\n\r\n      const eventsWithId = res.userEvents.map((event) => ({\r\n        ...event,\r\n        id: event._id, // Assuming the ID field is named _id in the database\r\n      }));\r\n      setEvents(eventsWithId); // Update local state with events from database\r\n    } catch (error) {\r\n      console.error(\"Error fetching events:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDateClick = (arg) => {\r\n    Swal.fire({\r\n      title: \"Enter details for your event:\",\r\n      html: `\r\n        <label for=\"fontSize\">Font Size:</label><br>\r\n        <select id=\"fontSize\" class=\"swal2-input\">\r\n        \r\n          <option selected>${defaultFontSize}</option>\r\n          <option value=\"8\">8</option>\r\n          <option value=\"9\">9</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"11\">11</option>\r\n          <option value=\"12\" >12</option>\r\n          <option value=\"14\">14</option>\r\n          <option value=\"16\">16</option>\r\n          <option value=\"18\">18</option>\r\n          <option value=\"20\">20</option>\r\n          <option value=\"22\">22</option>\r\n          <option value=\"24\">24</option>\r\n          <option value=\"26\">26</option>\r\n          <option value=\"28\">28</option>\r\n          <option value=\"36\">36</option>\r\n          <option value=\"48\">48</option>\r\n          <option value=\"72\">72</option>\r\n        </select><br><br>\r\n\r\n        <label for=\"textColorPicker\">Text Color:</label><br>\r\n        <input id=\"textColorPicker\" type=\"color\" value=\"${defaultTextColor}\" style=\"margin-bottom: 1rem;\"><br>\r\n  \r\n        <label for=\"backgroundColorPicker\">Background Color:</label><br>\r\n        <input id=\"backgroundColorPicker\" type=\"color\" value=\"${defaultBackgroundColor}\" style=\"margin-bottom: 1rem;\"><br>\r\n  \r\n  \r\n        <input id=\"eventTitle\" type=\"text\" class=\"swal2-input\" placeholder=\"Event Title\">\r\n      `,\r\n      showCancelButton: true,\r\n      confirmButtonText: \"Save\",\r\n      cancelButtonText: \"Cancel\",\r\n      didOpen: () => {\r\n        const textColorPicker =\r\n          Swal.getPopup().querySelector(\"#textColorPicker\");\r\n        textColorPicker.setAttribute(\"value\", defaultTextColor);\r\n        const backgroundColorPicker = Swal.getPopup().querySelector(\r\n          \"#backgroundColorPicker\"\r\n        );\r\n        backgroundColorPicker.setAttribute(\"value\", defaultBackgroundColor);\r\n      },\r\n      preConfirm: () => {\r\n        const title = document.getElementById(\"eventTitle\").value;\r\n        const backgroundColor = document.getElementById(\r\n          \"backgroundColorPicker\"\r\n        ).value;\r\n        const textColor = document.getElementById(\"textColorPicker\").value;\r\n        const fontSize = document.getElementById(\"fontSize\").value;\r\n        if (!title) {\r\n          Swal.showValidationMessage(\"Please enter a title\");\r\n        }\r\n        return { title, backgroundColor, textColor, fontSize };\r\n      },\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        const { title, backgroundColor, textColor, fontSize } = result.value;\r\n        const newEvent = {\r\n          id: generateId(),\r\n          title,\r\n          date: arg.dateStr,\r\n          backgroundColor,\r\n          textColor,\r\n          fontSize,\r\n        };\r\n        setEvents([...events, newEvent]); // Update local state\r\n        await saveEventToDB(newEvent); // Save event to database\r\n        setDefaultTextColor(textColor);\r\n        setDefaultBackgroundColor(backgroundColor);\r\n        setDefaultFontSize(fontSize);\r\n        fetchEventsFromDB(); // Fetch events from database\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleEventClick = (eventInfo) => {\r\n    const inputBackgroundColor = document.createElement(\"input\");\r\n    inputBackgroundColor.type = \"color\";\r\n    inputBackgroundColor.value = eventInfo.event.backgroundColor;\r\n\r\n    const inputTextColor = document.createElement(\"input\");\r\n    inputTextColor.type = \"color\";\r\n    inputTextColor.value = eventInfo.event.textColor;\r\n\r\n    const eventId = eventInfo.event.id;\r\n    const eventTitle = eventInfo.event.title;\r\n    const eventFontSize = eventInfo.event.extendedProps.fontSize;\r\n\r\n    Swal.fire({\r\n      title: \"Edit Event\",\r\n      html: `\r\n        <label for=\"editTitle\">Title:</label><br>\r\n        <input id=\"editTitle\" class=\"swal2-input\" type=\"text\" value=\"${eventTitle}\" style=\"margin-bottom: 1rem;\"><br>\r\n  \r\n        <label for=\"editFontSize\">Font Size:</label><br>\r\n        <select id=\"editFontSize\" class=\"swal2-input\">\r\n          <option value=\"${eventFontSize}\">${eventFontSize}</option>\r\n          <option value=\"8\">8</option>\r\n          <option value=\"9\">9</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"11\">11</option>\r\n          <option value=\"12\">12</option>\r\n          <option value=\"14\">14</option>\r\n          <option value=\"16\">16</option>\r\n          <option value=\"18\">18</option>\r\n          <option value=\"20\">20</option>\r\n          <option value=\"22\">22</option>\r\n          <option value=\"24\">24</option>\r\n          <option value=\"26\">26</option>\r\n          <option value=\"28\">28</option>\r\n          <option value=\"36\">36</option>\r\n          <option value=\"48\">48</option>\r\n          <option value=\"72\">72</option>\r\n        </select><br><br>\r\n  \r\n        <label for=\"editBackgroundColor\">Background Color:</label><br>\r\n        <div id=\"backgroundColorPickerContainer\"></div><br>\r\n  \r\n        <label for=\"editTextColor\">Text Color:</label><br>\r\n        <div id=\"textColorPickerContainer\"></div><br>\r\n  \r\n        \r\n      `,\r\n      didOpen: () => {\r\n        document\r\n          .getElementById(\"backgroundColorPickerContainer\")\r\n          .appendChild(inputBackgroundColor);\r\n        document\r\n          .getElementById(\"textColorPickerContainer\")\r\n          .appendChild(inputTextColor);\r\n      },\r\n      showDenyButton: true,\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#0ECC00\",\r\n      confirmButtonText: \"Save Update\",\r\n      denyButtonText: `Delete Event`,\r\n      preConfirm: () => {\r\n        const title = document.getElementById(\"editTitle\").value;\r\n        const textColor = inputTextColor.value;\r\n        const backgroundColor = inputBackgroundColor.value;\r\n        const fontSize = document.getElementById(\"editFontSize\").value;\r\n\r\n        if (!title) {\r\n          Swal.showValidationMessage(\"Please enter a title\");\r\n        }\r\n\r\n        return { id: eventId, title, textColor, backgroundColor, fontSize };\r\n      },\r\n    }).then(async (result) => {\r\n      if (result.isConfirmed) {\r\n        const { id, title, textColor, backgroundColor, fontSize } =\r\n          result.value;\r\n        const updatedEvent = {\r\n          title,\r\n          textColor,\r\n          backgroundColor,\r\n          fontSize,\r\n        };\r\n\r\n        await EventService.UpdateEvent(id, updatedEvent);\r\n\r\n        const updatedEvents = events.map((event) =>\r\n          event.id === id ? { ...updatedEvent } : event\r\n        );\r\n        setEvents(updatedEvents);\r\n\r\n        fetchEventsFromDB();\r\n\r\n        Swal.fire({\r\n          title: \"Updated Successfully\",\r\n          icon: \"success\",\r\n          showConfirmButton: false,\r\n\r\n          timer: 1000,\r\n        });\r\n      } else if (result.isDenied) {\r\n        handleDeleteEvent(eventInfo.event.id);\r\n      }\r\n    });\r\n  };\r\n\r\n  const generateId = () => {\r\n    return \"_\" + Math.random().toString(36).substr(2, 9);\r\n  };\r\n\r\n  const handleDeleteEvent = (id) => {\r\n    try {\r\n      Swal.fire({\r\n        title: \"Are you sure?\",\r\n        text: \"You won't be able to revert this!\",\r\n        icon: \"warning\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#3085d6\",\r\n        cancelButtonColor: \"#d33\",\r\n        confirmButtonText: \"Yes, delete it!\",\r\n      }).then(async (result) => {\r\n        if (result.isConfirmed) {\r\n          // Send DELETE request to server with event ID\r\n          await EventService.DeleteEvent(id);\r\n          // Update events state after deletion\r\n          const updatedEvents = events.filter((event) => event._id !== id);\r\n          setEvents(updatedEvents);\r\n          fetchEventsFromDB();\r\n          Swal.fire({\r\n            title: \"Deleted!\",\r\n            text: \"Your file has been deleted.\",\r\n            icon: \"success\",\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error deleting event:\", error);\r\n    }\r\n  };\r\n\r\n  const handleLineNotify = () => {\r\n    try {\r\n      Swal.fire({\r\n        title: \"ส่งแจ้งเตือนการอัพเดต\",\r\n        text: \"ส่งแจ้งเตือนการอัพเดตตารางแผนงานไปที่ Line Notify\",\r\n        icon: \"question\",\r\n        showCancelButton: true,\r\n        confirmButtonColor: \"#3085d6\",\r\n        cancelButtonColor: \"#d33\",\r\n        confirmButtonText: \"Confirm\",\r\n      }).then(async (result) => {\r\n        if (result.isConfirmed) {\r\n          await EventService.LineNotify();\r\n          Swal.fire({\r\n            title: \"ส่งแจ้งเตือน Line สำเร็จ!\",\r\n            icon: \"success\",\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error deleting event:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mb-3\">\r\n        <button className=\"btn btn-success \" onClick={handleLineNotify}>\r\n        <FontAwesomeIcon icon={faBell} /> ส่งแจ้งเตือนอัพเดตผ่าน LINE \r\n        </button>\r\n      </div>\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin]}\r\n        initialView=\"dayGridMonth\"\r\n        selectable={true}\r\n        events={events}\r\n        dateClick={handleDateClick}\r\n        eventContent={(eventInfo) => (\r\n          <div\r\n            style={{\r\n              backgroundColor: eventInfo.event.backgroundColor,\r\n              color: eventInfo.event.textColor,\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              marginLeft: \"5px\",\r\n              marginRight: \"5px\",\r\n              overflow: \"hidden\",\r\n              textOverflow: \"ellipsis\",\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                whiteSpace: \"nowrap\",\r\n                padding: \"5px\",\r\n                fontSize: eventInfo.event.extendedProps.fontSize, // ใช้ fontSize ที่มาจาก extendedProps\r\n              }}\r\n            >\r\n              {eventInfo.event.title}\r\n            </span>\r\n          </div>\r\n        )}\r\n        eventClick={handleEventClick}\r\n        headerToolbar={{\r\n          start: \"title\",\r\n          center: \"\",\r\n          end: \"today prev,next\",\r\n        }}\r\n        dayMaxEventRows={window.innerWidth >= 576 ? 4 : 0}\r\n        views={{\r\n          dayGridMonth: {\r\n            dayMaxEventRows: window.innerWidth >= 576 ? 4 : 0,\r\n          },\r\n          timeGridWeek: {\r\n            dayMaxEventRows: window.innerWidth >= 576 ? 4 : 0,\r\n          },\r\n          timeGridDay: {\r\n            dayMaxEventRows: window.innerWidth >= 576 ? 4 : 0,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EventCalendar;\r\n","import React from 'react'\r\nimport Event from '../../components/EventCalendar/index'\r\n\r\nconst EventCalendar = () => {\r\n  return (\r\n    <div className='container' >\r\n      <Event />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EventCalendar\r\n"],"names":["axios","create","baseURL","process","headers","Accept","getUserData","token","localStorage","getItem","API","defaults","common","concat","get","data","error","console","UpdateUser","userId","editedData","response","put","log","user","getEvents","AuthService","LineNotify","AddEvent","newEvent","post","events","UpdateEvent","id","updatedEvent","DeleteEvent","delete","StyleSheet","page","flexDirection","backgroundColor","padding","section","margin","flexGrow","title","fontSize","marginBottom","event","setEvents","useState","defaultTextColor","setDefaultTextColor","defaultBackgroundColor","setDefaultBackgroundColor","defaultFontSize","setDefaultFontSize","useEffect","fetchEventsFromDB","async","eventsWithId","EventService","userEvents","map","_id","generateId","Math","random","toString","substr","handleDeleteEvent","Swal","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","updatedEvents","filter","_jsxs","children","_jsx","className","onClick","handleLineNotify","FontAwesomeIcon","faBell","FullCalendar","plugins","dayGridPlugin","interactionPlugin","timeGridPlugin","initialView","selectable","dateClick","arg","html","cancelButtonText","didOpen","querySelector","setAttribute","preConfirm","document","getElementById","value","textColor","date","dateStr","saveEventToDB","eventContent","eventInfo","style","color","display","justifyContent","alignItems","marginLeft","marginRight","overflow","textOverflow","whiteSpace","extendedProps","eventClick","inputBackgroundColor","createElement","type","inputTextColor","eventId","eventTitle","eventFontSize","appendChild","showDenyButton","denyButtonText","showConfirmButton","timer","isDenied","headerToolbar","start","center","end","dayMaxEventRows","window","innerWidth","views","dayGridMonth","timeGridWeek","timeGridDay","EventCalendar","Event"],"sourceRoot":""}