export const getAddEvent = async ({
  arg,
  events,
  setEvents,
  defaultTextColor,
  defaultBackgroundColor,
  setDefaultTextColor,
  setDefaultBackgroundColor,
  setDefaultFontSize,
  saveEventToDB,
  fetchEventsFromDB,

  CustomerService,
  AuthService,
  Swal,
  TomSelect,
  moment,
}) => {
  const [customers, employees] = await Promise.all([
    CustomerService.getCustomers(),
    AuthService.getAllUserData(),
  ]);
  const employeeList = employees?.allUser || [];

  Swal.fire({
    title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà",
    customClass: "swal-wide",
    // ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Responsive
    html: `
<!-- Container ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á -->
<div style="display: flex; justify-content: center;">
  <div class="swal-form-grid" style="
    display: flex;
    flex-wrap: wrap;
    gap: 16px;
    margin-top: 12px;
    font-family: 'Segoe UI', sans-serif;

  ">

    <!-- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó -->
    <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
      <label for="eventCompany" style="font-weight: bold; margin-bottom: 6px; display: block;">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó/‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•:</label>
      <select id="eventCompany" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
        <option selected disabled></option>
        ${customers.userCustomers
          .map((c) => `<option value="${c.cCompany}">${c.cCompany}</option>`)
          .join("")}
      </select>
    </div>

    <!-- ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ -->
    <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
      <label for="eventSite" style="font-weight: bold; margin-bottom: 6px; display: block;">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:</label>
      <select id="eventSite" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
        <option selected disabled></option>
        ${customers.userCustomers
          .map((c) => `<option value="${c.cSite}">${c.cSite}</option>`)
          .join("")}
      </select>
    </div>

    <!-- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô -->
    <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
      <label for="eventTitle" style="font-weight: bold; margin-bottom: 6px; display: block;">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô:</label>
      <select id="eventTitle" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
        <option selected disabled></option>
        ${[
          "LOCAL",
          "PO",
          "PM",
          "Service",
          "Training",
          "Inspection",
          "Test & Commissioning",
          "‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô",
          "‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
          "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
          "‡∏™‡πÅ‡∏ï‡∏ô‡∏ö‡∏≤‡∏¢",
          "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
          "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
        ]
          .map((title) => `<option value="${title}">${title}</option>`)
          .join("")}
      </select>
    </div>

    <!-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô -->
    <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
      <label for="eventSystem" style="font-weight: bold; margin-bottom: 6px; display: block;">‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô:</label>
      <select id="eventSystem" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
        <option selected disabled></option>
        ${["Office", "Fire Alarm", "CCTV", "Access Control", "Networks"]
          .map((sys) => `<option value="${sys}">${sys}</option>`)
          .join("")}
      </select>
    </div>

    <!-- ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà -->
    <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
      <label for="eventTime" style="font-weight: bold; margin-bottom: 6px; display: block;">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà:</label>
      <select id="eventTime" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
        <option selected disabled></option>
        ${["1", "2", "3", "4"]
          .map((t) => `<option value="${t}">${t}</option>`)
          .join("")}
      </select>
    </div>

    <!-- ‡∏ó‡∏µ‡∏° -->
    <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
      <label for="eventTeam" style="font-weight: bold; margin-bottom: 6px; display: block;">‡∏ó‡∏µ‡∏°:</label>
      <select id="eventTeam" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
        <option selected disabled></option>
        ${employeeList
          .map((e) => `<option value="${e.fname}">${e.fname}</option>`)
          .join("")}
      </select>
    </div>

    <!-- ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà) -->
    <div style="display: none;">
      <label for="fontSize">‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£:</label>
      <select id="fontSize" class="swal2-input">
        ${[8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72]
          .map((size) => `<option value="${size}">${size}</option>`)
          .join("")}
      </select>
    </div>

  </div>
</div>

<!-- ‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á -->
<div style="display: flex; justify-content: center;">
  <div class="swal-form-grid" style="
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    align-items: flex-start;
    margin-top: 12px;
    font-family: 'Segoe UI', sans-serif;
    max-width: 1000px; /* ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô modal */
  ">
  <div style="margin-bottom: 12px;">
    <label for="backgroundColorPicker" style="font-weight: bold;">‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á:</label><br>
    <input id="backgroundColorPicker" type="color" style="width: 150px; height: 35px; border-radius: 6px;" value="${defaultBackgroundColor}" />
  </div>

  <div style="margin-bottom: 12px;">
    <label for="textColorPicker" style="font-weight: bold;">‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:</label><br>
    <input id="textColorPicker" type="color" style="width: 150px; height: 35px; border-radius: 6px;" value="${defaultTextColor}" />
  </div>

<div style="flex: 1; min-width: 100px;">
    <label for="start" style="font-weight: bold; margin-bottom: 4px; display: block;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</label><br>
    <input id="start" type="date"  style="width: 100%; padding: 6px 10px; border-radius: 6px; border: 1px solid #ccc;" value="${
      arg.dateStr
    }" />
  </div>

<div style="flex: 1; min-width: 100px;">
    <label for="end"style="font-weight: bold; margin-bottom: 4px; display: block;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</label><br>
    <input id="end" type="date"  style="width: 100%; padding: 6px 10px; border-radius: 6px; border: 1px solid #ccc;" value="${
      arg.dateStr
    }" />
  </div>
</div>
</div>

<div style="display: flex; justify-content: center;">
  <div class="swal-form-grid" style="
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    align-items: flex-start;
    margin-top: 12px;
    font-family: 'Segoe UI', sans-serif;
    max-width: 1000px; /* ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô modal */
  ">


<!-- ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° -->
<div style="flex: 1; min-width: 100px;">
  <label for="startTime" style="font-weight: bold; margin-bottom: 4px; display: block;">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° :</label>
  <input
    id="startTime"
    type="text"
    placeholder="‡πÄ‡∏ä‡πà‡∏ô 08:30"

    style="width: 100%; padding: 6px 10px; border-radius: 6px; border: 1px solid #ccc;"
 
  />
</div>

<!-- ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î -->
<div style="flex: 1; min-width: 100px;">
  <label for="endTime" style="font-weight: bold; margin-bottom: 4px; display: block;">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î :</label>
  <input
    id="endTime"
    type="text"
    placeholder="‡πÄ‡∏ä‡πà‡∏ô 17:45"

    style="width: 100%; padding: 6px 10px; border-radius: 6px; border: 1px solid #ccc;"
 
  />
</div>



  </div>
</div>


    `,

    showCancelButton: true,
    confirmButtonText: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô",
    cancelButtonText: "üîô ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    didOpen: () => {
      new TomSelect("#eventCompany", {
        create: true, // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
        maxOptions: 7,

        placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó",
        sortField: {
          field: "text",
          direction: "asc",
        },
      });

      new TomSelect("#eventSite", {
        create: true,
        maxOptions: 7,

        placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
        sortField: {
          field: "text",
          direction: "asc",
        },
      });

      new TomSelect("#eventTitle", {
        create: true,

        placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠",
        sortField: {
          field: "text",
          direction: "asc",
        },
      });

      new TomSelect("#eventSystem", {
        create: true,
        placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö",
        sortField: {
          field: "text",
          direction: "asc",
        },
      });
      new TomSelect("#eventTime", {
        create: true,
        placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà",

        sortField: {
          field: "text",
          direction: "asc",
        },
      });

      new TomSelect("#eventTeam", {
        create: true,
        placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°",

        sortField: {
          field: "text",
          direction: "asc",
        },
      });

      const textColorPicker = Swal.getPopup().querySelector("#textColorPicker");
      textColorPicker.setAttribute("value", defaultTextColor);

      const backgroundColorPicker = Swal.getPopup().querySelector(
        "#backgroundColorPicker"
      );
      backgroundColorPicker.setAttribute("value", defaultBackgroundColor);
    },
    preConfirm: () => {
      const requiredFields = ["eventSite", "eventTitle"];
      for (const id of requiredFields) {
        const value = document.getElementById(id)?.value;
        if (!value) {
          Swal.showValidationMessage(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ${id.replace("event", "")}`);
          return false;
        }
      }

      return {
        company: document.getElementById("eventCompany")?.value || "",
        site: document.getElementById("eventSite")?.value,
        title: document.getElementById("eventTitle")?.value,
        system: document.getElementById("eventSystem")?.value,
        time: document.getElementById("eventTime")?.value,
        team: document.getElementById("eventTeam")?.value,
        backgroundColor: document.getElementById("backgroundColorPicker")
          ?.value,
        textColor: document.getElementById("textColorPicker")?.value,
        fontSize: document.getElementById("fontSize")?.value,
        start: document.getElementById("start")?.value,
        end: document.getElementById("end")?.value,

        startTime: document.getElementById("startTime")?.value,
        endTime: document.getElementById("endTime")?.value,
      };
    },
  }).then(async (result) => {
    if (result.isConfirmed) {
      const {
        company,
        site,
        title,
        system,
        time,
        team,
        backgroundColor,
        textColor,
        fontSize,
        start,
        end,

          startTime,
             endTime,
      } = result.value;

      const newEnd = moment(end).add(1, "days");
      const newEvent = {
        company,
        site,
        title,
        system,
        time,
        team, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        date: arg.dateStr,
        backgroundColor,
        textColor,
        fontSize,
        start,
        end: newEnd.format("YYYY-MM-DD"),

             startTime,
             endTime,
      };

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Customer ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ company ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤)
      const existingCustomer = customers.userCustomers.find(
        (c) => c.cCompany === company && c.cSite === site
      );

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ company ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ (null ‡∏´‡∏£‡∏∑‡∏≠ "")
      if (!existingCustomer) {
        await CustomerService.AddCustomer({
          cCompany: company ?? "", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null ‡πÇ‡∏î‡∏¢‡πÅ‡∏ó‡∏ô‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á
          cSite: site ?? "",
        });
      }

      setEvents((prev) => [...prev, newEvent]);
      await Promise.all([
        saveEventToDB(newEvent),
        !existingCustomer &&
          CustomerService.AddCustomer({
            cCompany: company ?? "",
            cSite: site ?? "",
          }),
      ]);
      setDefaultTextColor(textColor);
      setDefaultBackgroundColor(backgroundColor);
      setDefaultFontSize(fontSize);

      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      await fetchEventsFromDB();
    }
  });
};
