import Toastify from "toastify-js";
import "toastify-js/src/toastify.css";

export const getEditEvent = async ({
  setEvents,
  fetchEventsFromDB,
  eventInfo,
  setLoading,
  generateWorkPermitPDF,
  handleDeleteEvent,
  EventService,
  CustomerService,
  AuthService,
  Swal,
  TomSelect,
  moment,
  calendarRef,
}) => {
  const inputBackgroundColor = document.createElement("input");
  inputBackgroundColor.type = "color";
  inputBackgroundColor.value = eventInfo.event.backgroundColor;

  const inputTextColor = document.createElement("input");
  inputTextColor.type = "color";
  inputTextColor.value = eventInfo.event.textColor;

  const eventId = eventInfo.event.id;
  const docNum = eventInfo.event.docNum;
  const evendocNo = eventInfo.event.extendedProps?.docNo || "";
  const eventCompany = eventInfo.event.extendedProps?.company || "";
  const eventSite = eventInfo.event.extendedProps?.site || "";

  const eventTitle = eventInfo.event.title;
  const eventSystem = eventInfo.event.extendedProps?.system || "";
  const eventTeam = eventInfo.event.extendedProps?.team || "";
  const eventTime = eventInfo.event.extendedProps?.time || "";

  const eventFontSize = eventInfo.event.extendedProps.fontSize;

  const eventStart = moment(eventInfo.event.start);
  const eventEnd = moment(eventInfo.event.end);
  const eventAllDay = eventInfo.event.allDay;

  let eventStatus = eventInfo.event.extendedProps?.status || "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

  const eventSubject = eventInfo.event.extendedProps?.subject || "";
  const eventDescription = eventInfo.event.extendedProps?.description || "";

  const eventStartTime = eventInfo.event.extendedProps?.startTime || "";
  const eventEndTime = eventInfo.event.extendedProps?.endTime || "";

  const formattedEnd = eventAllDay
    ? moment(eventEnd).subtract(1, "days").format("YYYY-MM-DD")
    : moment(eventEnd).format("YYYY-MM-DDTHH:mm");

  const res = await CustomerService.getCustomers();
  const employees = await AuthService.getAllUserData();

  const employeeList = employees?.allUser || [];

  // üîß ‡πÇ‡∏Ñ‡πâ‡∏î htmlEdit ‡∏û‡∏£‡πâ‡∏≠‡∏° label ‡∏ó‡∏∏‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const htmlEdit = `

          <!-- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô (‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) -->
          <!-- ‚úÖ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ label ‡∏Ñ‡∏£‡∏≠‡∏ö select -->
          <div style="margin-bottom: 12px; width: 100%;">
            <label
              for="editStatus"
              style="display: block; margin-bottom: 4px; font-weight: bold;"
            >
              üõ†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô :
            </label>

            <!-- ‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏£‡∏á select -->
            <select
              id="editStatus"
              class="swal2-select"
              style="
                width: 100%;
                height: 40px;
                text-align-last: center;
                appearance: none;
              "
            >
              ${[
                // "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
                "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
                // "‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß",
                // "‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
                "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
              ]
                .map(
                  (status) =>
                    `<option value="${status}" ${
                      eventStatus === status ? "selected" : ""
                    }>${status}</option>`
                )
                .join("")}
            </select>
          </div>

      <!-- Container ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á -->
      <div style="display: flex; justify-content: center;">
        <!-- Grid ‡∏ü‡∏≠‡∏£‡πå‡∏° -->
        <div class="swal-form-grid" style="
          display: flex;
          flex-wrap: wrap;
          gap: 16px;
          margin-top: 12px;
          font-family: 'Segoe UI', sans-serif;
        ">

          <!-- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó -->
          <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
            <label for="editCompany" style="font-weight: bold; margin-bottom: 6px; display: block;">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó/‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•:</label>
            <select id="editCompany" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
              <option disabled selected>${eventCompany}</option>
              ${res.userCustomers
                .map(
                  (c) =>
                    `<option value="${c.cCompany}" ${
                      eventCompany === c.cCompany ? "selected" : ""
                    }>${c.cCompany}</option>`
                )
                .join("")}
            </select>
          </div>

          <!-- ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ -->
          <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
<label for="editSite" style="font-weight: bold; margin-bottom: 6px; display: block;">
  <span style="color: red;">*</span> ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£:
</label>            <select id="editSite" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
              <option disabled selected>${eventSite || ""}</option>
              ${res.userCustomers
                .map(
                  (c) =>
                    `<option value="${c.cSite}" ${
                      eventSite === c.cSite ? "selected" : ""
                    }>${c.cSite}</option>`
                )
                .join("")}
            </select>
          </div>

    <!-- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô -->
    <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
<label for="editTitle" style="font-weight: bold; margin-bottom: 6px; display: block;">
  <span style="color: red;">*</span> ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô:
</label>
      <select id="editTitle" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
        <option disabled selected>${eventTitle || ""}</option>
        ${[
          "LOCAL",
          "PO",
          "PM",
          "Service",
          "Training",
          "Inspection",
          "Test & Commissioning",
          "‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô",
          "‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
          "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
          "‡∏™‡πÅ‡∏ï‡∏ô‡∏ö‡∏≤‡∏¢",
          "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
          "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
        ]
          .map(
            (title) =>
              `<option value="${title}" ${
                eventTitle === title ? "selected" : ""
              }>${title}</option>`
          )
          .join("")}
      </select>
    </div>

    <!-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô -->
    <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
<label for="editSystem" style="font-weight: bold; margin-bottom: 6px; display: block;">
  <span style="color: red;">*</span> ‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô:
</label>      <select id="editSystem" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
        <option disabled selected>${eventSystem || ""}</option>
        ${["Office", "Fire Alarm", "CCTV", "Access Control", "Networks"]
          .map(
            (sys) =>
              `<option value="${sys}" ${
                eventSystem === sys ? "selected" : ""
              }>${sys}</option>`
          )
          .join("")}
      </select>
    </div>

    <!-- ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà -->
    <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
      <label for="editTime" style="font-weight: bold; margin-bottom: 6px; display: block;">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà:</label>
      <select id="editTime" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
        <option disabled selected>${eventTime}</option>
        ${["1", "2", "3", "4"]
          .map(
            (t) =>
              `<option value="${t}" ${
                eventTime === t ? "selected" : ""
              }>${t}</option>`
          )
          .join("")}
      </select>
    </div>

    <!-- ‡∏ó‡∏µ‡∏° -->
    <div style="flex: 1 1 calc(33.333% - 16px); min-width: 220px;">
      <label for="editTeam" style="font-weight: bold; margin-bottom: 6px; display: block;">‡∏ó‡∏µ‡∏°:</label>
      <select id="editTeam" class="swal2-select" style="width: 100%; padding: 10px 14px; font-size: 15px; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9;">
        <option disabled selected>${eventTeam || ""}</option>
        ${employeeList
          .map(
            (e) =>
              `<option value="${e.fname}" ${
                eventTeam === e.fname ? "selected" : ""
              }>${e.fname}</option>`
          )
          .join("")}
      </select>
    </div>

  </div>
</div>



<div style="display: flex; justify-content: center;">
  <div class="swal-form-grid" style="
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    align-items: flex-start;
    margin-top: 12px;
    font-family: 'Segoe UI', sans-serif;
    max-width: 1000px; /* ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô modal */
  ">

    <!-- ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á -->
    <div style=" min-width: 100px;">
      <label style="font-weight: bold; margin-bottom: 4px; display: block;">‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á :</label>
      <div id="backgroundColorPickerContainer"></div>
    </div>

    <!-- ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° -->
    <div style="flex: 1; min-width: 100px;">
      <label style="font-weight: bold; margin-bottom: 4px; display: block;">‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° :</label>
      <div id="textColorPickerContainer"></div>
    </div>

    <!-- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° -->
    <div style="flex: 1; min-width: 100px;">
      <label for="editStart" style="font-weight: bold; margin-bottom: 4px; display: block;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° :</label>
      <input
        id="editStart"
        type="date"
        style="width: 100%; padding: 6px 10px; border-radius: 6px; border: 1px solid #ccc;"
        value="${eventStart.format("YYYY-MM-DD")}"
      />
    </div>

    <!-- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î -->
    <div style="flex: 1; min-width: 100px;">
      <label for="editEnd" style="font-weight: bold; margin-bottom: 4px; display: block;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î :</label>
      <input
        id="editEnd"
        type="date"
        style="width: 100%; padding: 6px 10px; border-radius: 6px; border: 1px solid #ccc;"
        value="${formattedEnd}"
      />
    </div>






  </div>
</div>


<div style="display: flex; justify-content: center;">
  <div class="swal-form-grid" style="
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    align-items: flex-start;
    margin-top: 12px;
    font-family: 'Segoe UI', sans-serif;
    max-width: 1000px; /* ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô modal */
  ">


<!-- ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° -->
<div style="flex: 1; min-width: 100px;">
  <label for="editStartTime" style="font-weight: bold; margin-bottom: 4px; display: block;">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° :</label>
  <input
    id="editStartTime"
    type="text"
    placeholder="‡πÄ‡∏ä‡πà‡∏ô 08:30"

    style="width:80%; padding: 6px 10px; border-radius: 6px; border: 1px solid #ccc;"
    value="${eventStartTime || ""}"
  />
</div>

<!-- ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î -->
<div style="flex: 1; min-width: 100px;">
  <label for="editEndTime" style="font-weight: bold; margin-bottom: 4px; display: block;">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î :</label>
  <input
    id="editEndTime"
    type="text"
    placeholder="‡πÄ‡∏ä‡πà‡∏ô 17:45"

    style="width: 80%; padding: 6px 10px; border-radius: 6px; border: 1px solid #ccc;"
    value="${eventEndTime || ""}"
  />
</div>



  </div>
</div>
<br><br>


    <!-- ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ -->
        <div style="margin-top: 12px; position: relative;">
        <label for="editDescription" style="font-weight: bold; display: block; margin-bottom: 6px;">
            * ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (doc No.) :
        </label>

            <input id="editdocNo" type="" style="width: 80%; height: 35px" class="swal2-input" value="${evendocNo}" />
        </div>      
        <br>
        
        
    <!-- ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á -->
        <div style="margin-top: 12px; position: relative;">
        <label for="editSubject" style="font-weight: bold; display: block; margin-bottom: 6px;">
            * ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (Subject.) :
        </label>

            <input id="editSubject" type="" style="width: 80%; height: 35px" class="swal2-input" value="${eventSubject}" />
        </div>      
        <br>


    <!-- ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô -->
    <div style="margin-top: 12px; position: relative;">
    <label for="editDescription" style="font-weight: bold; display: block; margin-bottom: 6px;">
        * ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô (Description) :
    </label>

    <textarea
        id="editDescription"
        rows="10"
        
    
        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF"

        style="
        width: 100%;
        padding: 14px 16px;
        font-size: 15px;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        transition: border-color 0.3s, box-shadow 0.3s;
        resize: vertical;
        font-family: 'Segoe UI', sans-serif;
        "
    ></textarea>



  <!-- ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ -->
<div id="charCount" style="text-align: right; font-size: 12px; color: #666; margin-top: 4px;">
  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: 0
</div>


<div style="margin-top: 16px;">
  <label for="editImage" style="font-weight: bold; display: block; margin-bottom: 6px;">
    ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö:
  </label>
  <input type="file" id="editImage" accept="image/*" style="width: 100%; padding: 8px;" />
  <div id="imagePreviewContainer" style="margin-top: 10px;"></div>
</div>

<br><br><br>


</div>


  `;

  Swal.fire({
    title: `<h4>[ ${eventTitle} ] ${eventSystem} ${eventSite}${
      eventTeam ? ` (‡∏ó‡∏µ‡∏° ${eventTeam})` : ""
    }</h4>`,
    html: htmlEdit,

    showConfirmButton: false, // ‚ùå ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏°
    showCancelButton: false,

    showCloseButton: true,
    customClass: "swal-wide",
    footer: `
  <div id="custom-footer-buttons" style="margin-top: 20px; display: flex; flex-wrap: wrap; justify-content: center; gap: 12px;">
    <button id="btnConfirm" class="swal2-confirm swal2-styled" style="background-color: #0ECC00;">
      ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    </button>

    <button id="btnGeneratePDF" class="swal2-confirm swal2-styled" style="background-color: #0064de;">
      üìù ‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô
    </button>

    <button id="btnCancel" class="swal2-cancel swal2-styled" style="background-color: #999;">
      üîô ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    </button>
  </div>
`,
showDenyButton: true,
denyButtonText: "‚ùå ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ",


    didOpen: () => {
      const descriptionInput = document.getElementById("editDescription");
      const charCountDisplay = document.getElementById("charCount");

      const clearBtn = document.getElementById("clearDescriptionBtn");

      const imageInput = document.getElementById("editImage");
      const previewContainer = document.getElementById("imagePreviewContainer");

      if (imageInput) {
        imageInput.addEventListener("change", () => {
          const file = imageInput.files[0];
          if (!file) return;

          const reader = new FileReader();
          reader.onload = (e) => {
            const imgUrl = e.target.result;

            previewContainer.innerHTML = `
        <img src="${imgUrl}" alt="Preview" style="max-width: 100%; max-height: 200px; border-radius: 8px; cursor: pointer;" id="previewImage" />
      `;

            // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å
            document
              .getElementById("previewImage")
              ?.addEventListener("click", () => {
                Swal.fire({
                  title: "‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
                  imageUrl: imgUrl,
                  imageAlt: "Uploaded Image",
                  showCloseButton: true,
                  width: "auto",
                });
              });
          };
          reader.readAsDataURL(file);
        });
      }

      if (descriptionInput) {
        descriptionInput.value = eventDescription || "";
      }

      const statusColorMap = {
        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: "#888888",
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß: "#0c49ac",
        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: "#a1b50b",
        ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: "#18b007",
      };

      const iconMap = {
        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: "fa-hourglass-half",
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß: "fa-check",
        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: "fa-clock-rotate-left",
        ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: "fa-check-double",
      };
      const initTomSelect = (id, create = true, placeholder = "") => {
        return new TomSelect(id, {
          create,
          persist: false,
          placeholder,
          maxItems: null, // ‚úÖ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ input ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô
          closeAfterSelect: false,
          dropdownInput: true,
          selectOnTab: true,
          plugins: ["remove_button"],
          onItemAdd: function () {
            // ‚úÖ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà 1 ‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠
            if (this.items.length > 1) {
              this.removeItem(this.items[0], true);
            }
          },
        });
      };

      // üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á TomSelect ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      [
        ["#editCompany", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"],
        ["#editSite", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"],
        ["#editTitle", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠"],
        ["#editSystem", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö"],
        ["#editTime", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà"],
        ["#editTeam", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°"],
      ].forEach(([id, placeholder]) => initTomSelect(id, true, placeholder));

      const statusSelect = new TomSelect("#editStatus", {
        create: false,
        placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô",
        render: {
          option: (data, escape) => {
            const color = statusColorMap[data.value] || "#ccc";
            const icon = iconMap[data.value] || "fa-circle";
            return `
            <div style="display: flex; align-items: center; gap: 8px;">
              <i class="fas ${icon}" style="color: ${color}; width: 18px;"></i>
              <span>${escape(data.text)}</span>
            </div>`;
          },
          item: (data, escape) => `<div>${escape(data.text)}</div>`,
        },

        onChange: (value) => {
          const control = statusSelect.control_input.parentElement;
          control.style.backgroundColor = statusColorMap[value] || "#ccc";
          control.style.color = value === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ? "#000" : "#fff";
          control.style.borderColor = "#999";

          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï eventInfo.event ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          if (eventInfo?.event) {
            const calendarApi = calendarRef.current?.getApi();
            const oldEvent = eventInfo.event;

            const newEventData = {
              id: oldEvent.id,
              title: oldEvent.title,
              start: oldEvent.start,
              end: oldEvent.end,
              backgroundColor: inputBackgroundColor.value, // ‚úÖ ‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà
              textColor: inputTextColor.value,
              fontSize: oldEvent.extendedProps.fontSize,
              status: oldEvent.extendedProps.status,
              manualStatus: oldEvent.extendedProps.manualStatus,
              description: oldEvent.extendedProps.description,
              extendedProps: {
                ...oldEvent.extendedProps,
              },
            };

            oldEvent.remove();
            calendarApi.addEvent(newEventData);
          }

          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô state ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ React ‡∏´‡∏£‡∏∑‡∏≠ Vue
          //   setEvents((prevEvents) =>
          //     prevEvents.map((event) =>
          //       event.id === eventInfo.event.id
          //         ? { ...event, status: value }
          //         : event
          //     )
          //   );
        },
      });
      const initialColor = statusColorMap[statusSelect.getValue()] || "#ccc";
      const control = statusSelect.control_input.parentElement;
      control.style.backgroundColor = initialColor;
      control.style.color =
        statusSelect.getValue() === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ? "#000" : "#fff";

      [inputBackgroundColor, inputTextColor].forEach((el) => {
        Object.assign(el.style, {
          width: "150px",
          height: "35px",
          border: "4px solid #ccc",
          cursor: "pointer",
        });
      });

      document
        .getElementById("backgroundColorPickerContainer")
        .appendChild(inputBackgroundColor);
      document
        .getElementById("textColorPickerContainer")
        .appendChild(inputTextColor);

      const updateCharCount = () => {
        const val = descriptionInput?.value || "";
        if (charCountDisplay) {
          charCountDisplay.innerText = `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: ${val.length}`;
        }
      };

      if (descriptionInput) {
        descriptionInput.addEventListener("input", updateCharCount);
        updateCharCount(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î popup
      }

      if (clearBtn && descriptionInput) {
        clearBtn.addEventListener("click", () => {
          descriptionInput.value = "";
          updateCharCount();
        });
      }
    },

    didRender: () => {
      const getVal = (id) => document.getElementById(id)?.value || "";

      document.getElementById("btnConfirm")?.addEventListener("click", () => {
        Swal.clickConfirm(); // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ result.isConfirmed === true
      });

      document.getElementById("btnDeny")?.addEventListener("click", () => {
        handleDeleteEvent(eventId);
        Swal.close();
      });

      document.getElementById("btnCancel")?.addEventListener("click", () => {
        Swal.close();
      });

      const endInput = getVal("editEnd");
      const end = endInput
        ? eventAllDay
          ? moment(endInput).add(1, "days").toISOString()
          : moment(endInput).toISOString()
        : eventEnd.toISOString();
      document
        .getElementById("btnGeneratePDF")
        ?.addEventListener("click", () => {
          const toast = Toastify({
            text: `
              <div style="text-align:center">
                <div style="margin-bottom:8px;">‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</div>
                <button id="toast-confirm" style="margin-right:10px; padding:4px 12px; background:#fff; border:none; border-radius:4px; cursor:pointer;">‡∏ï‡∏Å‡∏•‡∏á</button>
                <button id="toast-cancel" style="padding:4px 12px; background:#fff; border:none; border-radius:4px; cursor:pointer;">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
              </div>
            `,
            duration: 3000,
            gravity: "top", // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ "top" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏î‡∏±‡∏î‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ
            position: "center",
            backgroundColor: "#0064de",
            escapeMarkup: false,
          });

          toast.showToast();

          setTimeout(() => {
            const confirmBtn = document.getElementById("toast-confirm");
            const cancelBtn = document.getElementById("toast-cancel");

            if (confirmBtn) {
              confirmBtn.addEventListener("click", async () => {
                toast.hideToast(); // ‚úÖ ‡∏õ‡∏¥‡∏î Toastify

                const subject = getVal("editSubject");
                if (!subject) {
                  Toastify({
                    text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á",
                    duration: 3000,
                    backgroundColor: "#f44336",
                    gravity: "top",
                    position: "center",
                  }).showToast();
                  return;
                }

                const updatedEvent = {
                  id: eventId,
                  docNo: getVal("editdocNo"),
                  company: getVal("editCompany"),
                  site: getVal("editSite"),
                  title: getVal("editTitle"),
                  system: getVal("editSystem"),
                  time: getVal("editTime"),
                  team: getVal("editTeam"),
                  textColor: inputTextColor.value,
                  backgroundColor: inputBackgroundColor.value,
                  fontSize: eventFontSize,
                  status: getVal("editStatus"),
                  start: moment(getVal("editStart")).toISOString(),
                  end,
                  manualStatus: true,
                  subject: getVal("editSubject"),
                  description: getVal("editDescription"),

                  startTime: getVal("editStartTime"),
                  endTime: getVal("editEndTime"),
                };

                try {
                  await EventService.UpdateEvent(eventId, updatedEvent);
                  await fetchEventsFromDB();

                  Toastify({
                    text: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á PDF...",
                    duration: 3000,
                    backgroundColor: "#0ECC00",
                    gravity: "top",
                    position: "center",
                  }).showToast();

                  // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ generateWorkPermitPDF ‡∏Ñ‡∏∑‡∏ô URL ‡∏Ç‡∏≠‡∏á PDF
                  const pdfUrl = await generateWorkPermitPDF(
                    eventInfo.event,
                    updatedEvent.docNo,
                    updatedEvent.subject,
                    updatedEvent.description,
                    updatedEvent.startTime,
                    updatedEvent.endTime
                  );

                  // ‡πÄ‡∏õ‡∏¥‡∏î PDF ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                  window.open(pdfUrl, "_blank");
                } catch (error) {
                  Toastify({
                    text: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
                    duration: 3000,
                    backgroundColor: "#f44336",
                    gravity: "top",
                    position: "center",
                  }).showToast();
                }
              });
            }

            if (cancelBtn) {
              cancelBtn.addEventListener("click", () => {
                toast.hideToast(); // ‚úÖ ‡∏õ‡∏¥‡∏î Toastify
              });
            }
          }, 100);
        });

      document
        .getElementById("btnViewSchedule")
        ?.addEventListener("click", () => {
          window.location.href = `/operation/${eventId}`;
        });
    },

    preConfirm: () => {
      const getVal = (id) => document.getElementById(id)?.value || "";
      const title = getVal("editTitle");
      const site = getVal("editSite");
      const system = getVal("editSystem");

      const startTime = getVal("editStartTime") || "";
      const endTime = getVal("editEndTime") || "";

      if (!title) Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô");
      if (!site) Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£");
      if (!system) Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô");

      const endInput = getVal("editEnd");
      const end = endInput
        ? eventAllDay
          ? moment(endInput).add(1, "days").toISOString()
          : moment(endInput).toISOString()
        : eventEnd.toISOString();

      const imageFile = document.getElementById("editImage")?.files[0] || null;

      return {
        id: eventId,
        docNo: getVal("editdocNo"),
        company: getVal("editCompany"),
        site: getVal("editSite"),
        title,
        system: getVal("editSystem"),
        time: getVal("editTime"),
        team: getVal("editTeam"),
        textColor: inputTextColor.value,
        backgroundColor: inputBackgroundColor.value,
        fontSize: eventFontSize,
        status: getVal("editStatus"),
        start: moment(getVal("editStart")).toISOString(),
        end,
        manualStatus: true,

        subject: getVal("editSubject"),
        description: getVal("editDescription"),

        startTime,
        endTime,

        imageFile,
      };
    },
  }).then(async (result) => {
    console.log("üî• Swal result:", result);

    if (result.isConfirmed) {
      setLoading(true);
      const {
        id,
        docNo,
        company,
        site,
        title,
        system,
        time,
        team,
        textColor,
        backgroundColor,
        fontSize,
        status,
        start,
        end,
        manualStatus,
        subject,
        description,

        startTime,
        endTime,
      } = result.value;

      console.log("StartTimeInput", startTime);
      console.log("EndTimeInput", endTime);

      const updatedEvent = {
        docNo,
        company,
        site,
        title,
        system,
        time,
        team,
        textColor,
        backgroundColor,
        fontSize,
        status,
        start,
        end,
        manualStatus,

        subject,
        description,

        startTime,
        endTime,
      };

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Customer ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ company ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤)
      const existingCustomer = res.userCustomers.find(
        (c) => c.cCompany === company && c.cSite === site
      );

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ company ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ (null ‡∏´‡∏£‡∏∑‡∏≠ "")
      if (!existingCustomer) {
        await CustomerService.AddCustomer({
          cCompany: company ?? "", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null ‡πÇ‡∏î‡∏¢‡πÅ‡∏ó‡∏ô‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á
          cSite: site ?? "",
        });
      }

      const { imageFile } = result.value;

      if (imageFile) {
        const formData = new FormData();
        formData.append("image", imageFile);
        formData.append("eventId", id);
await EventService.UpdateImageEvent(eventId, updatedEvent, imageFile);
      }

      setEvents((prevEvents) =>
        prevEvents.map((event) => (event.id === id ? updatedEvent : event))
      );

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
      await EventService.UpdateEvent(id, updatedEvent);
      await fetchEventsFromDB();

      // console.log("üì§ updatedEvent:", updatedEvent);
      // console.log("üì¶ event.start:", updatedEvent.start);
      // console.log("üì¶ event.end:", updatedEvent.end);

      // console.log("‚úÖ Valid start:", moment(updatedEvent.start).isValid());
      // console.log("‚úÖ Valid end:", moment(updatedEvent.end).isValid());

      setLoading(false);

      Swal.fire({
        title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        icon: "success",
        showConfirmButton: false,
        timer: 1000,
      });
    } else if (result.isDenied) {
      handleDeleteEvent(eventId);
    }
  });
};
