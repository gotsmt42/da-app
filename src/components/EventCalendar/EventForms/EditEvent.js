export const getEditEvent = async ({
  setEvents,
  fetchEventsFromDB,
  eventInfo,
  setLoading,
  generateWorkPermitPDF,
  handleDeleteEvent,
  EventService,
  CustomerService,
  AuthService,
  Swal,
  TomSelect,
  moment,
}) => {
  const inputBackgroundColor = document.createElement("input");
  inputBackgroundColor.type = "color";
  inputBackgroundColor.value = eventInfo.event.backgroundColor;

  const inputTextColor = document.createElement("input");
  inputTextColor.type = "color";
  inputTextColor.value = eventInfo.event.textColor;

  const eventId = eventInfo.event.id;
  const eventCompany = eventInfo.event.extendedProps?.company || "";
  const eventSite = eventInfo.event.extendedProps?.site || "";

  const eventTitle = eventInfo.event.title;
  const eventSystem = eventInfo.event.extendedProps?.system || "";
  const eventTeam = eventInfo.event.extendedProps?.team || "";
  const eventTime = eventInfo.event.extendedProps?.time || "";

  const eventFontSize = eventInfo.event.extendedProps.fontSize;

  const eventStart = moment(eventInfo.event.start);
  const eventEnd = moment(eventInfo.event.end);
  const eventAllDay = eventInfo.event.allDay;

  let eventStatus = eventInfo.event.extendedProps?.status || "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

  const formattedEnd = eventAllDay
    ? moment(eventEnd).subtract(1, "days").format("YYYY-MM-DDTHH:mm")
    : moment(eventEnd).format("YYYY-MM-DDTHH:mm");

  const res = await CustomerService.getCustomers();
  const employees = await AuthService.getAllUserData();

  const employeeList = employees?.allUser || [];

  // üîß ‡πÇ‡∏Ñ‡πâ‡∏î htmlEdit ‡∏û‡∏£‡πâ‡∏≠‡∏° label ‡∏ó‡∏∏‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
  const htmlEdit = `

          <!-- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô (‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) -->
          <!-- ‚úÖ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ label ‡∏Ñ‡∏£‡∏≠‡∏ö select -->
          <div style="margin-bottom: 12px; width: 100%;">
            <label
              for="editStatus"
              style="display: block; margin-bottom: 4px; font-weight: bold;"
            >
              üõ†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô :
            </label>

            <!-- ‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏£‡∏á select -->
            <select
              id="editStatus"
              class="swal2-select"
              style="
                width: 100%;
                height: 40px;
                text-align-last: center;
                appearance: none;
              "
            >
              ${[
                // "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
                "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
                "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
                "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
                // "‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß",
                // "‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
                "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
              ]
                .map(
                  (status) =>
                    `<option value="${status}" ${
                      eventStatus === status ? "selected" : ""
                    }>${status}</option>`
                )
                .join("")}
            </select>
          </div>


      <div class="swal-form-grid">
  


      <!-- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó -->
      <div>
        <label for="editCompany">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó : </label>
        <select id="editCompany" class="swal2-select">
          <option disabled selected>${eventCompany}</option>
          ${res.userCustomers
            .map(
              (c) =>
                `<option value="${c.cCompany}" ${
                  eventCompany === c.cCompany ? "selected" : ""
                }>${c.cCompany}</option>`
            )
            .join("")}
        </select>
      </div>
  
      <!-- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà -->
      <div>
        <label for="editSite">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ : </label>
        <select id="editSite" class="swal2-select">
          <option disabled selected>${eventSite || ""}</option>
          ${res.userCustomers
            .map(
              (c) =>
                `<option value="${c.cSite}" ${
                  eventSite === c.cSite ? "selected" : ""
                }>${c.cSite}</option>`
            )
            .join("")}
        </select>
      </div>
  
      <!-- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô -->
      <div>
        <label for="editTitle">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô : </label>
        <select id="editTitle" class="swal2-select">
          <option disabled selected>${eventTitle || ""}</option>
          
          ${[
            "LOCAL",
            "PO",
            "PM",
            "Service",
            "Training",
            "Inspection",
            "Test & Commissioning",
            "‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô",
            "‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
            "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤",
            "‡∏™‡πÅ‡∏ï‡∏ô‡∏ö‡∏≤‡∏¢",
            "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
            "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
          ]
            .map(
              (title) =>
                `<option value="${title}" ${
                  eventTitle === title ? "selected" : ""
                }>${title}</option>`
            )
            .join("")}
        </select>
      </div>
  
      <!-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô -->
      <div>
        <label for="editSystem">‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô : </label>
        <select id="editSystem" class="swal2-select">
          <option disabled selected>${eventSystem || ""}</option>
          ${["Office", "Fire Alarm", "CCTV", "Access Control", "Networks"]
            .map(
              (sys) =>
                `<option value="${sys}" ${
                  eventSystem === sys ? "selected" : ""
                }>${sys}</option>`
            )
            .join("")}
        </select>
      </div>
  
      <!-- ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà -->
      <div>
        <label for="editTime">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà : </label>
        <select id="editTime" class="swal2-select">
          <option disabled selected>${eventTime}</option>
          ${["1", "2", "3", "4"]
            .map(
              (t) =>
                `<option value="${t}" ${
                  eventTime === t ? "selected" : ""
                }>${t}</option>`
            )
            .join("")}
        </select>
      </div>


      <div>
        <label for="editSystem">‡∏ó‡∏µ‡∏° : </label>
        <select id="editTeam" class="swal2-select">
          <option disabled selected>${eventTeam || ""}</option>
            ${employeeList
              .map(
                (employee) =>
                  `<option value="${employee.fname}">${employee.fname}</option>`
              )
              .join("")}

        </select>
      </div>
  
  
      
  
    </div>
    <!-- ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á -->
      <div>
        <label>‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á : </label><br>
        <div id="backgroundColorPickerContainer"></div>
      </div><br>
  
      <!-- ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° -->
      <div>
        <label>‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° : </label><br>
        <div id="textColorPickerContainer" ></div>
      </div><br>
  
      <!-- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° -->
      <div >
        <label for="editStart">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô : </label>
        <input id="editStart" type="datetime-local" style="width: 80%; height: 35px" class="swal2-input" value="${eventStart.format(
          "YYYY-MM-DDTHH:mm"
        )}" />
      </div><br>
  
      <!-- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î -->
      <div>
        <label for="editEnd">‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î : </label>
        <input id="editEnd" type="datetime-local" style="width: 80%; height: 35px" class="swal2-input" value="${formattedEnd}" />
      </div><br>
  `;

  Swal.fire({
    title: `<h4>[ ${eventTitle} ] ${eventSystem} ${eventSite}${
      eventTeam ? ` (‡∏ó‡∏µ‡∏° ${eventTeam})` : ""
    }</h4>`,
    html: htmlEdit,
    showDenyButton: true,
    showCancelButton: true,
    confirmButtonColor: "#0ECC00",
    confirmButtonText: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á",
    denyButtonText: "‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô",
    showExtraButton: true,
    customClass: "swal-wide",
    showCloseButton: true,
    didOpen: () => {
      const statusColorMap = {
        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: "#888888",
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß: "#0c49ac",
        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: "#a1b50b",
        ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: "#18b007",
      };

      const iconMap = {
        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: "fa-hourglass-half",
        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß: "fa-check",
        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: "fa-clock-rotate-left",
        ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: "fa-check-double",
      };
      const initTomSelect = (id, create = true, placeholder = "") => {
        return new TomSelect(id, {
          create,
          maxOptions: 7,
          placeholder,
          sortField: { field: "text", direction: "asc" },
        });
      };
      const statusSelect = new TomSelect("#editStatus", {
        create: false,
        placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô",
        render: {
          option: (data, escape) => {
            const color = statusColorMap[data.value] || "#ccc";
            const icon = iconMap[data.value] || "fa-circle";
            return `
            <div style="display: flex; align-items: center; gap: 8px;">
              <i class="fas ${icon}" style="color: ${color}; width: 18px;"></i>
              <span>${escape(data.text)}</span>
            </div>`;
          },
          item: (data, escape) => `<div>${escape(data.text)}</div>`,
        },
        onChange: (value) => {
          const control = statusSelect.control_input.parentElement;
          control.style.backgroundColor = statusColorMap[value] || "#ccc";
          control.style.color = value === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ? "#000" : "#fff";
          control.style.borderColor = "#999";
        },
      });
      const initialColor = statusColorMap[statusSelect.getValue()] || "#ccc";
      const control = statusSelect.control_input.parentElement;
      control.style.backgroundColor = initialColor;
      control.style.color =
        statusSelect.getValue() === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ? "#000" : "#fff";

      // üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á TomSelect ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      [
        ["#editCompany", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"],
        ["#editSite", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"],
        ["#editTitle", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠"],
        ["#editSystem", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö"],
        ["#editTime", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà"],
        ["#editTeam", "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°"],
      ].forEach(([id, placeholder]) => initTomSelect(id, true, placeholder));

      [inputBackgroundColor, inputTextColor].forEach((el) => {
        Object.assign(el.style, {
          width: "150px",
          height: "35px",
          border: "4px solid #ccc",
          cursor: "pointer",
        });
      });

      document
        .getElementById("backgroundColorPickerContainer")
        .appendChild(inputBackgroundColor);
      document
        .getElementById("textColorPickerContainer")
        .appendChild(inputTextColor);
    },

    didRender: () => {
      const createButton = (text, color, onClick) => {
        const btn = document.createElement("button");
        btn.innerText = text;
        btn.className = "swal2-confirm swal2-styled";
        btn.style.backgroundColor = color;
        btn.style.marginLeft = "10px";
        btn.onclick = onClick;
        Swal.getActions().appendChild(btn);
      };

      createButton("‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô", "#0064de", () =>
        generateWorkPermitPDF(eventInfo.event)
      );
      createButton("‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô", "#d602a1", () => {
        window.location.href = `/operation/${eventId}`;
      });
    },
    preConfirm: () => {
      const getVal = (id) => document.getElementById(id)?.value || "";
      const title = getVal("editTitle");
      if (!title) Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô");

      const endInput = getVal("editEnd");
      const end = endInput
        ? eventAllDay
          ? moment(endInput).add(1, "days").toISOString()
          : moment(endInput).toISOString()
        : eventEnd.toISOString();

      return {
        id: eventId,
        company: getVal("editCompany"),
        site: getVal("editSite"),
        title,
        system: getVal("editSystem"),
        time: getVal("editTime"),
        team: getVal("editTeam"),
        textColor: inputTextColor.value,
        backgroundColor: inputBackgroundColor.value,
        fontSize: eventFontSize,
        status: getVal("editStatus"),
        start: moment(getVal("editStart")).toISOString(),
        end,
        manualStatus: true,
      };
    },
  }).then(async (result) => {
    if (result.isConfirmed) {
      setLoading(true);
      const {
        id,
        docNo,
        company,
        site,
        title,
        system,
        time,
        team,
        textColor,
        backgroundColor,
        fontSize,
        status,
        start,
        end,
        manualStatus,
      } = result.value;

      const updatedEvent = {
        docNo,
        company,
        site,
        title,
        system,
        time,
        team,
        textColor,
        backgroundColor,
        fontSize,
        status,
        start,
        end,
        manualStatus, // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö level ‡∏ö‡∏ô‡∏™‡∏∏‡∏î
        extendedProps: { manualStatus },
      };

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Customer ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ company ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤)
      const existingCustomer = res.userCustomers.find(
        (c) => c.cCompany === company && c.cSite === site
      );

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ company ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ (null ‡∏´‡∏£‡∏∑‡∏≠ "")
      if (!existingCustomer) {
        await CustomerService.AddCustomer({
          cCompany: company ?? "", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null ‡πÇ‡∏î‡∏¢‡πÅ‡∏ó‡∏ô‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á
          cSite: site ?? "",
        });
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï event ‡πÉ‡∏ô FullCalendar
      eventInfo.event.setProp("textColor", textColor);
      eventInfo.event.setProp("backgroundColor", backgroundColor);
      eventInfo.event.setExtendedProp("status", status);
      eventInfo.event.setExtendedProp("manualStatus", manualStatus);

      setEvents((prevEvents) =>
        prevEvents.map((event) => (event.id === id ? updatedEvent : event))
      );

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
      await EventService.UpdateEvent(id, updatedEvent);
      await fetchEventsFromDB();
      setLoading(false);

      Swal.fire({
        title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        icon: "success",
        showConfirmButton: false,
        timer: 1000,
      });
    } else if (result.isDenied) {
      handleDeleteEvent(eventId);
    }
  });
};
