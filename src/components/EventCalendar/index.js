import React, { useState, useEffect, useRef } from "react";
import ReactDOM from "react-dom/client";

import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid"; // for dayClick
import momentTimezonePlugin from "@fullcalendar/moment-timezone";

import interactionPlugin, { Draggable } from "@fullcalendar/interaction"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Draggable

import listPlugin from "@fullcalendar/list";

import { saveAs } from "file-saver";

import * as XLSX from "xlsx";

import Swal from "sweetalert2";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome"; // Import FontAwesomeIcon component

import {
  faBell,
  faClockFour,
  faClockRotateLeft,
  faFileExcel,
  faFilePdf,
  faPlus,
} from "@fortawesome/free-solid-svg-icons"; // Import ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ

import CustomerService from "../../services/CustomerService";
import EventService from "../../services/EventService";
import EventReceiveService from "../../services/EventReceiveService";
import fetchHolidayService from "../../services/fetchHolidayService";
import moment from "moment";

import { ThreeDots } from "react-loader-spinner";

import generatePDF, { Resolution, Margin } from "react-to-pdf";

import { Col, Row } from "reactstrap";

import { CSVLink } from "react-csv";

import "./index.css";

import API from "../../API/axiosInstance";

import { toast } from "react-toastify"; // ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ react-toastify

import { faTimes } from "@fortawesome/free-solid-svg-icons";
import { faSearch } from "@fortawesome/free-solid-svg-icons";
import thLocale from "@fullcalendar/core/locales/th"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ locale ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢

import { useAuth } from "../../auth/AuthContext"; // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Auth

import {
  faHourglassHalf,
  faCheckCircle,
  faCheck,
  faClock,
  faSpinner,
  faCheckDouble,
} from "@fortawesome/free-solid-svg-icons";

import { jsPDF } from "jspdf";

import thSarabunFont from "../../Fonts/THSarabunNew_base64"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ base64 font

import TomSelect from "tom-select";
import "tom-select/dist/css/tom-select.css";

import Hammer from "hammerjs";

function EventCalendar() {
  const { userData } = useAuth(); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å user ‚Üí userData
  const isAdmin = userData?.role?.toLowerCase() === "admin"; // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö case-insensitive

  const [events, setEvents] = useState([]);
  const [newEventTitle, setNewEventTitle] = useState(""); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input

  const [eventReceive, setEventReceive] = useState([]);
  const [defaultAllDay, setdefaultAllDay] = useState(true); // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const [defaultTextColor, setDefaultTextColor] = useState("#FFFFFF"); // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const [defaultBackgroundColor, setDefaultBackgroundColor] =
    useState("#FF5733"); // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

  const [defaultFontSize, setDefaultFontSize] = useState(8); //

  const [loading, setLoading] = useState(false); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î

  const [searchTerm, setSearchTerm] = useState(""); // üîç State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

  const [currentMonth, setCurrentMonth] = useState(moment().format("YYYY-MM"));

  let isProcessing = false; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥

  useEffect(() => {
    fetchEventsFromDB();
    fetchEventReceiveFromDB();
    initExternalEvents(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏á component
  }, []);

  useEffect(() => {
    const today = moment().format("YYYY-MM-DD");
    let hasUpdated = false;

    const updatedEvents = events.map((event) => {
      const eventStartDate = moment(event.start).format("YYYY-MM-DD");
      // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏´‡∏≤‡∏Å event ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠ (manualStatus ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô true)
      // ‡πÅ‡∏•‡∏∞ status ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
      if (
        eventStartDate === today &&
        !event.manualStatus && // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ event.manualStatus ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ
        event.extendedProps?.status !== "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
      ) {
        hasUpdated = true;
        return {
          ...event,
          extendedProps: {
            ...event.extendedProps,
            status: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
          },
          manualStatus: false, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        };
      }
      return event;
    });

    if (hasUpdated) {
      setEvents(updatedEvents);
      updatedEvents.forEach(async (event) => {
        if (
          moment(event.start).format("YYYY-MM-DD") === today &&
          !event.manualStatus &&
          event.extendedProps?.status === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
        ) {
          try {
            await EventService.UpdateEvent(event.id, {
              status: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
              manualStatus: false,
            });
            console.log(
              `‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Event ID ${event.id} ‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"`
            );
          } catch (error) {
            console.error(
              `‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Event ID ${event.id} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error}`
            );
          }
        }
      });
    }
  }, [events]);

  useEffect(() => {
    const calendarEl = document.querySelector(".fc-view-harness");
    if (!calendarEl) return;

    const hammer = new Hammer(calendarEl);

    hammer.on("swipeleft", () => {
      calendarRef.current?.getApi().next();
    });

    hammer.on("swiperight", () => {
      calendarRef.current?.getApi().prev();
    });

    return () => hammer.destroy();
  }, []);

  const generateWorkPermitPDF = (event) => {
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "A4",
    });

    // üëâ ‡∏ü‡∏≠‡∏ô‡∏ï‡πå THSarabun
    doc.addFileToVFS("THSarabun.ttf", thSarabunFont);
    doc.addFont("THSarabun.ttf", "THSarabun", "normal");
    doc.setFont("THSarabun");
    doc.setFontSize(16);

    // üëâ ‡πÉ‡∏™‡πà‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó (‡∏£‡∏∞‡∏ö‡∏∏ base64 ‡∏´‡∏£‡∏∑‡∏≠ path)
    const logo = "001.png"; // üëà ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
    doc.addImage(logo, "PNG", 15, 10, 30, 30); // x, y, width, height

    // üëâ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏±‡∏ß‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢
    doc.setFontSize(20);
    doc.text("‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏î‡∏π ‡∏≠‡∏≠‡∏• ‡∏≠‡∏≤‡∏£‡πå‡∏Ñ‡∏¥‡πÄ‡∏ó‡∏Ñ ‡πÅ‡∏≠‡∏ô‡∏î‡πå ‡πÄ‡∏≠‡πá‡∏ô‡∏à‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏£‡∏¥‡πà‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î", 105, 20, {
      align: "center",
    });

    doc.setFontSize(14);
    doc.text("DO ALL ARCHITECT AND ENGINEERING CO.,LTD.", 105, 28, {
      align: "center",
    });

    doc.setFontSize(12);
    doc.text(
      "68/155 ‡∏´‡∏°‡∏π‡πà 3 ‡∏ñ‡∏ô‡∏ô‡∏ä‡∏±‡∏¢‡∏û‡∏§‡∏Å‡∏©‡πå ‡∏ï‡∏≥‡∏ö‡∏•‡∏Ñ‡∏•‡∏≠‡∏á‡∏û‡∏£‡∏∞‡∏≠‡∏∏‡∏î‡∏° ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏≤‡∏Å‡πÄ‡∏Å‡∏£‡πá‡∏î ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ 11120",
      105,
      34,
      {
        align: "center",
      }
    );

    doc.text("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: " + moment().format("DD-MM-YYYY"), 170, 44, {
      align: "right",
    });

    doc.line(15, 48, 195, 48); // ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô

    // üëâ ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
    doc.setFontSize(16);
    doc.text(
      "‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏•‡∏¥‡∏á‡πÑ‡∏´‡∏°‡πâ",
      105,
      58,
      {
        align: "center",
      }
    );

    // üëâ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Event
    const end_o = moment(event.end).format("DD-MM-YYYY");
    const start = moment(event.start).format("DD-MM-YYYY");
    const end = moment(event.end).format("DD-MM-YYYY");

    const lines = [
      "",
      `‡πÄ‡∏£‡∏µ‡∏¢‡∏ô  ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£`,
      "",
      `        ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏î‡∏π ‡∏≠‡∏≠‡∏• ‡∏≠‡∏≤‡∏Ñ‡∏¥‡πÄ‡∏ó‡∏Ñ ‡πÅ‡∏≠‡∏ô‡∏î‡πå ‡πÄ‡∏≠‡πá‡∏ô‡∏à‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏£‡∏¥‡πà‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡∏à‡∏≤‡∏Å ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ${event.extendedProps.company} `,
      `‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ${event.title} ‡∏£‡∏∞‡∏ö‡∏ö ${event.extendedProps.system} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${event.extendedProps.time} ‡∏ì ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ${event.extendedProps.site}`,
      "",

      `        ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏î‡∏π ‡∏≠‡∏≠‡∏• ‡∏≠‡∏≤‡∏Ñ‡∏¥‡πÄ‡∏ó‡∏Ñ ‡πÅ‡∏≠‡∏ô‡∏î‡πå ‡πÄ‡∏≠‡πá‡∏ô‡∏à‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏£‡∏¥‡πà‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏£‡∏≤‡∏ö‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤ ${event.title} ‡∏£‡∏∞‡∏ö‡∏ö ${event.extendedProps.system}`,
      `‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${event.extendedProps.time} ‡∏ã‡∏∂‡πà‡∏á‡∏ó‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ø ‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ`,

      "",

      `        Description`,

      "",

      "        ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏Ø ‡πÉ‡∏Ñ‡∏£‡πà‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠ ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏ó‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö",
      "‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà",
      "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏î‡∏π ‡∏≠‡∏≠‡∏• ‡∏≠‡∏≤‡∏Ñ‡∏¥‡πÄ‡∏ó‡∏Ñ ‡πÅ‡∏≠‡∏ô‡∏î‡πå ‡πÄ‡∏≠‡πá‡∏ô‡∏à‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏£‡∏¥‡πà‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå 082-069-0919 ‡∏î‡πâ‡∏ß‡∏¢ ‡∏à‡∏±‡∏Å‡∏Ç‡∏≠‡∏ö‡∏û‡∏£‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏¥‡πà‡∏á ",
    ];

    doc.setFontSize(14);
    let y = 68;
    lines.forEach((line) => {
      doc.text(line, 20, y);
      y += 8;
    });

    // üëâ ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
    const signature = "001.png"; // üëà ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
    doc.addImage(signature, "PNG", 140, y + 10, 40, 20); // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°

    doc.text("‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏∑‡∏≠", 140, y + 35);
    doc.text("‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏ö‡∏ö", 140, y + 45);
    doc.text("064-111-0988", 140, y + 52);

    // üëâ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PDF
    doc.save(`WorkPermit_${event.title}.pdf`);
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ External Events ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ
  const initExternalEvents = () => {
    let containerEl = document.getElementById("external-events");
    if (containerEl) {
      new Draggable(containerEl, {
        itemSelector: ".fc-event",
        eventData: (eventEl) => {
          return {
            title: eventEl.innerText.trim(), // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á event
          };
        },
      });
    }
  };

  const fetchEventReceiveFromDB = async () => {
    setLoading(true);
    try {
      const res = await EventReceiveService.getEvents();
      const eventsWithId = res.userEvents.map((eventReceive) => ({
        ...eventReceive,
        id: eventReceive._id || eventReceive.id,
        extendedProps: { _id: eventReceive._id || eventReceive.id }, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° _id ‡πÉ‡∏ô extendedProps
      }));

      setEventReceive(eventsWithId);
    } catch (error) {
      console.error("‚ùå Error fetching events:", error);
      toast.error("Failed to load events. Please try again later."); // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô error
    } finally {
      setLoading(false);
    }
  };
  const saveEventReceiveToDB = async (newEvent) => {
    try {
      // console.log("üîç Sending data to API:", JSON.stringify(newEvent, null, 2));

      const response = await EventReceiveService.AddEvent(newEvent);

      return response.data;
    } catch (error) {
      console.error(
        "‚ùå Error saving event to DB:",
        error.response?.data || error.message
      );
      throw error;
    }
  };
  const deleteEventFromDB = async (eventId) => {
    try {
      if (!eventId) {
        console.warn("‚ö† Event ID is missing, skipping deletion.");
        return;
      }

      console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Event ID: ${eventId} ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö`);

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Event ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô eventReceive ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const eventExists = eventReceive.some((e) => e._id === eventId);
      if (!eventExists) {
        console.warn(`‚ö† Event ID ${eventId} ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô eventReceive, ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏ö.`);
        return;
      }

      console.log(`üóë ‡∏•‡∏ö Event ID: ${eventId}`);
      const response = await API.delete(`/eventReceive/${eventId}`);

      if (response.status === 200) {
        console.log(`‚úÖ Event ${eventId} ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } else {
        console.warn(
          `‚ö† Event ${eventId} ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, status: ${response.status}`
        );
      }
    } catch (error) {
      console.error(
        `‚ùå Error deleting event ${eventId}:`,
        error.response?.data || error
      );
    }
  };

  const handleAddEventReceive = async (event) => {
    event.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ reload ‡∏´‡∏ô‡πâ‡∏≤

    if (!newEventTitle.trim()) return; // ‡∏ñ‡πâ‡∏≤ input ‡∏ß‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£

    const newEvent = { title: newEventTitle };

    try {
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° event ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ UI
      setEventReceive((prevEvents) => [...prevEvents, newEvent]);

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const savedEvent = await saveEventReceiveToDB(newEvent);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      // if (!savedEvent) {
      //   console.warn("‚ö†Ô∏è API ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      // }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ _id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏° _id ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      if (savedEvent && !savedEvent._id) {
        savedEvent._id = generateTemporaryId(); // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ ID
      }

      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å DB
      await fetchEventReceiveFromDB();
      await fetchEventsFromDB();

      // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå input ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
      setNewEventTitle("");
    } catch (error) {
      console.error("‚ùå Error handling event addition:", error);
    }
  };
  const handleEventReceive = async (info) => {
    if (isProcessing) {
      console.warn("‚ö† Function is already running, skipping duplicate call.");
      return;
    }

    isProcessing = true;

    try {
      const droppedEvent = info.event;
      const draggedEl = info.draggedEl;

      if (!droppedEvent.start) {
        console.error("‚ùå Dropped event has no start date.");
        return;
      }

      let eventIdToDelete = droppedEvent.extendedProps?._id || droppedEvent.id;
      if (!eventIdToDelete) {
        eventIdToDelete =
          draggedEl?.dataset?.eventId ||
          draggedEl?.getAttribute("data-event-id");
      }

      if (!eventIdToDelete) {
        console.error("‚ö† Event ID is missing. Skipping deletion.");
        return;
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Event ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isDuplicate = events.some((e) => e._id === eventIdToDelete);
      if (isDuplicate) {
        console.warn(
          `‚ö† Event ID ${eventIdToDelete} is already in FullCalendar.`
        );
        return;
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Event ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô `eventReceive` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const eventExistsInReceive = eventReceive.some(
        (e) => e._id === eventIdToDelete
      );
      if (eventExistsInReceive) {
        console.log(
          `‚úÖ Event ID ${eventIdToDelete} found in eventReceive, proceeding with deletion.`
        );

        // ‚úÖ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `setEventReceive` ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        setEventReceive((prevEvents) =>
          prevEvents.filter((event) => event._id !== eventIdToDelete)
        );

        // ‚úÖ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await deleteEventFromDB(eventIdToDelete);
      } else {
        console.warn(
          `‚ö† Event ID ${eventIdToDelete} not found in eventReceive, skipping deletion.`
        );
      }

      // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ start, end ‡πÅ‡∏•‡∏∞ date
      const startDate = moment(droppedEvent.start).format("YYYY-MM-DD");
      const endDate = droppedEvent.end
        ? moment(droppedEvent.end).format("YYYY-MM-DD")
        : moment(startDate).add(1, "days").format("YYYY-MM-DD");

      const newEvent = {
        title: droppedEvent.title || "Untitled Event",
        backgroundColor: droppedEvent.backgroundColor || "#FF5733",
        textColor: droppedEvent.textColor || "#ffffff",
        fontSize: droppedEvent.extendedProps?.fontSize
          ? droppedEvent.extendedProps.fontSize.toString()
          : "8",
        start: startDate,
        end: endDate,
        date: startDate,
        allDay: droppedEvent.allDay ?? true,
      };

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const response = await saveEventToDB(newEvent);

      if (response && response._id) {
        newEvent._id = response._id;
        newEvent.extendedProps = { _id: response._id };
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï events ‡πÉ‡∏ô FullCalendar
      setEvents((prevEvents) => [...prevEvents, newEvent]);

      // ‚úÖ ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÅ‡∏•‡∏∞ eventReceive ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
      await fetchEventsFromDB();
    } catch (error) {
      console.error("‚ùå Error in handleEventReceive:", error);
    } finally {
      isProcessing = false;
    }
  };

  const handleAddEventToCalendar = async (eventData) => {
    Swal.fire({
      title: `${eventData.title || "‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠"} `, // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å
      customClass: "swal-wide",
      html: `
            <label for="startDate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</label>
            <input id="startDate" type="date" class="swal2-input" style="margin-bottom: 1rem; width: 250px"><br>
        
            <label for="endDate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</label>
            <input id="endDate" type="date" class="swal2-input" style="margin-bottom: 1rem; width: 250px">
          `,
      showCancelButton: true,
      confirmButtonText: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      preConfirm: () => {
        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;

        if (!startDate || !endDate) {
          Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î");
          return false;
        }

        if (moment(endDate).isBefore(moment(startDate))) {
          Swal.showValidationMessage(
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
          );
          return false;
        }

        return { startDate, endDate };
      },
    }).then(async (result) => {
      if (result.isConfirmed) {
        const { startDate, endDate } = result.value;

        if (!startDate || !endDate) {
          Swal.fire(
            "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î!",
            "error"
          );
          return;
        }

        const start = moment(startDate).format("YYYY-MM-DD");
        const end = moment(endDate).add(1, "days").format("YYYY-MM-DD");

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏•‡∏á‡πÉ‡∏ô FullCalendar
        const newEvent = {
          title: eventData.title,
          start: start,
          end: end,
          date: start,
          backgroundColor: eventData.backgroundColor || "#0c49ac",
          textColor: eventData.textColor || "#ffffff",
          fontSize: eventData.fontSize || "12",
          allDay: true,
        };

        try {
          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏Ç‡∏≠‡∏á FullCalendar
          setEvents((prevEvents) => [...prevEvents, newEvent]);

          // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          await saveEventToDB(newEvent);

          // ‚úÖ ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á"
          setEventReceive((prevEvents) =>
            prevEvents.filter((event) => event._id !== eventData._id)
          );

          // ‚úÖ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á"
          await deleteEventFromDB(eventData._id);

          Swal.fire({
            title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            text: "‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            icon: "success",
            timer: 1500,
            showConfirmButton: false,
          });

          // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          await fetchEventsFromDB();
        } catch (error) {
          console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô:", error);
          Swal.fire(
            "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            "error"
          );
        }
      }
    });
  };

  const handleDeleteEventReceive = async (eventId) => {
    try {
      Swal.fire({
        title: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
        text: "‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å!",
        cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      }).then(async (result) => {
        if (result.isConfirmed) {
          // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          await deleteEventFromDB(eventId);

          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state eventReceive (‡∏•‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å)
          setEventReceive((prevEvents) => {
            const updatedEvents = prevEvents.filter(
              (event) => event._id !== eventId
            );

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const totalItemsLeft = updatedEvents.length;
            const maxPages = Math.ceil(totalItemsLeft / eventsPerPage);

            if (totalItemsLeft <= startIndex && currentPage > 1) {
              setCurrentPage(Math.max(1, currentPage - 1)); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            }

            return updatedEvents;
          });

          // Swal.fire({
          //   title: "‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
          //   text: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
          //   icon: "success",
          //   timer: 1500,
          //   showConfirmButton: false,
          // });
        }
      });
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:", error);
      Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        icon: "error",
      });
    }
  };

  const fetchThaiHolidaysFromAPI = async () => {
    try {
      const response = await API.get(`/holidays`);
      // console.log("API Response:", response.data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á API response

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response.data ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (response.data) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á response.data
        // console.log("Complete Data Structure:", JSON.stringify(response.data, null, 2));  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if (response.data && Array.isArray(response.data)) {
          // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô response.data ‡πÄ‡∏õ‡πá‡∏ô Array
          const holidays = response.data.map((holiday) => ({
            title: holiday.HolidayDescriptionThai,
            start: holiday.Date, //
            color: "#FF0000", // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ
          }));

          // console.log("Mapped Holidays for Calendar:", holidays);  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å map
          return holidays;
        } else {
          console.error(
            "Invalid structure, 'result.data' missing or incorrect."
          );
          return [];
        }
      } else {
        console.error("No data found in API response.");
        return [];
      }
    } catch (error) {
      console.error("Error fetching holidays from API:", error.message);
      return [];
    }
  };

  const fetchEventsFromDB = async () => {
    setLoading(true);
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• events ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const res = await EventService.getEvents();
      const eventsWithId = res.userEvents.map((event) => ({
        ...event,
        id: event._id,
        extendedProps: {
          ...event.extendedProps,
          company: event.company,
          site: event.site,
          system: event.system,
          time: event.time,
          manualStatus: event.manualStatus,
          status: event.status,
          fontSize: event.fontSize,
        },
      }));

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å API
      const thaiHolidays = await fetchThaiHolidaysFromAPI();
      // console.log("Fetched holidays:", thaiHolidays);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (thaiHolidays.length > 0) {
        const combinedEvents = [
          ...eventsWithId,
          ...thaiHolidays.map((holiday) => ({
            ...holiday,
            fontSize: defaultFontSize.extendedProps, // Apply default font size
          })),
        ]; // console.log("Combined events:", combinedEvents); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state
        setEvents(combinedEvents);
      } else {
        console.log("No holidays found, only user events will be displayed.");
        setEvents(eventsWithId);
      }
    } catch (error) {
      console.error("Error fetching events or holidays:", error);
    } finally {
      setLoading(false);
    }
  };

  const saveEventToDB = async (newEvent) => {
    try {
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ start, end, ‡πÅ‡∏•‡∏∞ date ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      if (!newEvent.start || !newEvent.end || !newEvent.date) {
        console.error("‚ùå Missing required fields:", newEvent);
        throw new Error("Missing required fields: start, end, or date");
      }

      // console.log("üîç Sending data to API:", JSON.stringify(newEvent, null, 2));

      const response = await EventService.AddEvent(newEvent);

      return response;
    } catch (error) {
      console.error("‚ùå Error saving event to DB:", error.message);
      throw error;
    }
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  const generateTemporaryId = () => {
    return "_" + Math.random().toString(36).substr(2, 9); // ‡∏™‡∏£‡πâ‡∏≤‡∏á id ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
  };

  const handleAddEvent = async (arg) => {
    const res = await CustomerService.getUserCustomers();

    Swal.fire({
      title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà",
      customClass: "swal-wide",
      // ‚úÖ ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Responsive
      html: `
      <div class="swal-form-grid">
        <!-- ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ã‡πâ‡∏≤‡∏¢-‡∏Ç‡∏ß‡∏≤‡πÅ‡∏ö‡∏ö 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå -->
        <div>
          <label for="eventCompany">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó : </label>
          <select id="eventCompany" class="swal2-select">
            <option selected disabled></option>
            ${res.userCustomers
              .map(
                (customer) =>
                  `<option value="${customer.cCompany}">${customer.cCompany}</option>`
              )
              .join("")}
          </select>
        </div>
    
        <div>
          <label for="eventSite">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ : </label>
          <select id="eventSite" class="swal2-select">
            <option selected disabled></option>
            ${res.userCustomers
              .map(
                (customer) =>
                  `<option value="${customer.cSite}">${customer.cSite}</option>`
              )
              .join("")}
          </select>
        </div>
    
        <div>
          <label for="eventTitle">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô:</label>
          <select id="eventTitle" class="swal2-select">
            <option selected disabled></option>
            <option value="Preventive Maintenance (PM)">Preventive Maintenance (PM)</option>
            <option value="Service">Service</option>
            <option value="Inspection">Inspection</option>
            <option value="Test & Commissioning">Test & Commissioning</option>
          </select>
        </div>
    
        <div>
          <label for="eventSystem">‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô:</label>
          <select id="eventSystem" class="swal2-select">
            <option selected disabled></option>
            <option value="Fire Alarm">Fire Alarm</option>
            <option value="CCTV">CCTV</option>
            <option value="Access Control">Access Control</option>
          </select>
        </div>
    
        <div>
          <label for="eventTime">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà:</label>
          <select id="eventTime" class="swal2-select">
            <option selected disabled></option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
          </select>
        </div>
    
        <div style="display: none;">
          <label for="fontSize">‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£:</label>
          <select id="fontSize" class="swal2-input">
            ${[8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72]
              .map((size) => `<option value="${size}">${size}</option>`)
              .join("")}
          </select>
        </div>
      </div>
    
      <!-- ‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á -->
      <div class="swal-form-bottom">
     
    
        <div>
          <label for="backgroundColorPicker">‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á:</label>
          <input id="backgroundColorPicker" style="width: 150px; height: 35px" type="color" value="${defaultBackgroundColor}" />
        </div><br>
       <div>
          <label for="textColorPicker">‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:</label>
          <input id="textColorPicker" style="width: 150; height: 35px" type="color" value="${defaultTextColor}" />
        </div><br>
        
      </div>
      <div>
          <label for="start">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:</label>
          <input id="start" type="date" style="width: 80%; height: 35px" class="swal2-input" value="${
            arg.dateStr
          }" />
        </div>
    
        <div>
          <label for="end">‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:</label>
          <input id="end" type="date" style="width: 80%; height: 35px" class="swal2-input" value="${
            arg.dateStr
          }" />
        </div>
    `,

      showCancelButton: true,
      confirmButtonText: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      didOpen: () => {
        new TomSelect("#eventCompany", {
          create: true, // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
          placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó",
          sortField: {
            field: "text",
            direction: "asc",
          },
        });

        new TomSelect("#eventSite", {
          create: true,
          placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
          sortField: {
            field: "text",
            direction: "asc",
          },
        });

        new TomSelect("#eventTitle", {
          create: true,
          placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠",
          sortField: {
            field: "text",
            direction: "asc",
          },
        });

        new TomSelect("#eventSystem", {
          create: true,
          placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö",
          sortField: {
            field: "text",
            direction: "asc",
          },
        });
        new TomSelect("#eventTime", {
          create: false,
          sortField: {
            field: "text",
            direction: "asc",
          },
        });

        const textColorPicker =
          Swal.getPopup().querySelector("#textColorPicker");
        textColorPicker.setAttribute("value", defaultTextColor);

        const backgroundColorPicker = Swal.getPopup().querySelector(
          "#backgroundColorPicker"
        );
        backgroundColorPicker.setAttribute("value", defaultBackgroundColor);
      },
      preConfirm: () => {
        const start = document.getElementById("start").value;
        const end = document.getElementById("end").value;
        const company = document.getElementById("eventCompany").value;
        const site = document.getElementById("eventSite").value;
        const title = document.getElementById("eventTitle").value;
        const system = document.getElementById("eventSystem").value;
        const time = document.getElementById("eventTime").value;
        const backgroundColor = document.getElementById(
          "backgroundColorPicker"
        ).value;
        const textColor = document.getElementById("textColorPicker").value;
        const fontSize = document.getElementById("fontSize").value;
        if (!site) {
          Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£");
        }
        if (!title) {
          Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠");
        }

        return {
          company,
          site,
          title,
          system,
          time,
          backgroundColor,
          textColor,
          fontSize,
          start,
          end,
        };
      },
    }).then(async (result) => {
      if (result.isConfirmed) {
        const {
          company,
          site,
          title,
          system,
          time,
          backgroundColor,
          textColor,
          fontSize,
          start,
          end,
        } = result.value;

        const newEnd = moment(end).add(1, "days");
        const newEvent = {
          company,
          site,
          title,
          system,
          time,
          date: arg.dateStr,
          backgroundColor,
          textColor,
          fontSize,
          start,
          end: newEnd.format("YYYY-MM-DD"),
        };

        setEvents([...events, newEvent]); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏Ç‡∏≠‡∏á FullCalendar
        await saveEventToDB(newEvent); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        setDefaultTextColor(textColor);
        setDefaultBackgroundColor(backgroundColor);
        setDefaultFontSize(fontSize);
        await fetchEventsFromDB(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      }
    });
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô":
        return faHourglassHalf; // ‚è≥ ‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
      case "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß":
        return faCheck; // ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      case "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£":
        return faClockRotateLeft; // üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
      case "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô":
        return faCheckDouble; // ‚úî‚úî ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      default:
        return null;
    }
  };

  const handleEditEvent = async (eventInfo) => {
    const inputBackgroundColor = document.createElement("input");
    inputBackgroundColor.type = "color";
    inputBackgroundColor.value = eventInfo.event.backgroundColor;

    const inputTextColor = document.createElement("input");
    inputTextColor.type = "color";
    inputTextColor.value = eventInfo.event.textColor;

    const eventId = eventInfo.event.id;
    const eventCompany = eventInfo.event.extendedProps?.company || "";
    const eventSite = eventInfo.event.extendedProps?.site || "";

    const eventTitle = eventInfo.event.title;
    const eventSystem = eventInfo.event.extendedProps?.system || "";
    const eventTime = eventInfo.event.extendedProps?.time || "";

    const eventFontSize = eventInfo.event.extendedProps.fontSize;

    const eventStart = moment(eventInfo.event.start);
    const eventEnd = moment(eventInfo.event.end);
    const eventAllDay = eventInfo.event.allDay;

    let eventStatus = eventInfo.event.extendedProps?.status || "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    let isAutoUpdated = eventInfo.event.extendedProps?.isAutoUpdated || false;

    const formattedEnd = eventAllDay
      ? moment(eventEnd).subtract(1, "days").format("YYYY-MM-DDTHH:mm")
      : moment(eventEnd).format("YYYY-MM-DDTHH:mm");

    const getBackgroundColorByStatus = (status) => {
      switch (status) {
        case "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô":
          return "#FF5733"; // ‡∏™‡∏µ‡∏™‡πâ‡∏°
        case "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß":
          return "#0c49ac"; // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
        case "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£":
          return "#d1c000"; // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        case "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô":
          return "#7bff00"; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡πÄ‡∏≠‡∏≤ # ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏≠‡∏≠‡∏Å)
        default:
          return "#ffffff"; // ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
      }
    };

    const getTextColorByStatus = (status) => {
      switch (status) {
        case "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô":
          return "#ffffff"; // ‡∏î‡∏≥
        case "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß":
          return "#ffffff"; // ‡∏Ç‡∏≤‡∏ß
        case "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£":
          return "#000000"; // ‡∏Ç‡∏≤‡∏ß
        case "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô":
          return "#000000"; // ‡∏î‡∏≥ (‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å ##fff ‡πÄ‡∏õ‡πá‡∏ô #000)
        default:
          return "#ffffff"; // ‡∏Ç‡∏≤‡∏ß
      }
    };

    let currentTextColor = getTextColorByStatus(eventStatus);
    let currentBackgroundColor = getBackgroundColorByStatus(eventStatus);

    const res = await CustomerService.getUserCustomers();

    // üîß ‡πÇ‡∏Ñ‡πâ‡∏î htmlEdit ‡∏û‡∏£‡πâ‡∏≠‡∏° label ‡∏ó‡∏∏‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    const htmlEdit = `
      <div class="swal-form-grid">
  
      <!-- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô -->
      <div>
        <label for="editStatus">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô : </label>
        <select id="editStatus" class="swal2-select">
          <option disabled selected>${eventStatus}</option>
          <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ${
            eventStatus === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" ? "selected" : ""
          }>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</option>
          <option value="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß" ${
            eventStatus === "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß" ? "selected" : ""
          }>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</option>
          <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ${
            eventStatus === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ? "selected" : ""
          }>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
          <option value="‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" ${
            eventStatus === "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" ? "selected" : ""
          }>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</option>
        </select>
      </div>
  
      <!-- ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó -->
      <div>
        <label for="editCompany">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó : </label>
        <select id="editCompany" class="swal2-select">
          <option disabled selected>${eventCompany || "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"}</option>
          ${res.userCustomers
            .map(
              (c) =>
                `<option value="${c.cCompany}" ${
                  eventCompany === c.cCompany ? "selected" : ""
                }>${c.cCompany}</option>`
            )
            .join("")}
        </select>
      </div>
  
      <!-- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà -->
      <div>
        <label for="editSite">‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ : </label>
        <select id="editSite" class="swal2-select">
          <option disabled selected>${eventSite || "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"}</option>
          ${res.userCustomers
            .map(
              (c) =>
                `<option value="${c.cSite}" ${
                  eventSite === c.cSite ? "selected" : ""
                }>${c.cSite}</option>`
            )
            .join("")}
        </select>
      </div>
  
      <!-- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô -->
      <div>
        <label for="editTitle">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô : </label>
        <select id="editTitle" class="swal2-select">
          <option disabled selected>${
            eventTitle || "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô"
          }</option>
          ${[
            "Preventive Maintenance (PM)",
            "Service",
            "Inspection",
            "Test & Commissioning",
          ]
            .map(
              (title) =>
                `<option value="${title}" ${
                  eventTitle === title ? "selected" : ""
                }>${title}</option>`
            )
            .join("")}
        </select>
      </div>
  
      <!-- ‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô -->
      <div>
        <label for="editSystem">‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô : </label>
        <select id="editSystem" class="swal2-select">
          <option disabled selected>${eventSystem || "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô"}</option>
          ${["Fire Alarm", "CCTV", "Access Control"]
            .map(
              (sys) =>
                `<option value="${sys}" ${
                  eventSystem === sys ? "selected" : ""
                }>${sys}</option>`
            )
            .join("")}
        </select>
      </div>
  
      <!-- ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà -->
      <div>
        <label for="editTime">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà : </label>
        <select id="editTime" class="swal2-select">
          <option disabled selected>${eventTime}</option>
          ${["1", "2", "3", "4"]
            .map(
              (t) =>
                `<option value="${t}" ${
                  eventTime === t ? "selected" : ""
                }>${t}</option>`
            )
            .join("")}
        </select>
      </div>
  
      
  
    </div>
    <!-- ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á -->
      <div>
        <label>‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á : </label><br>
        <div id="backgroundColorPickerContainer"></div>
      </div><br>
  
      <!-- ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° -->
      <div>
        <label>‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° : </label><br>
        <div id="textColorPickerContainer" ></div>
      </div><br>
  
      <!-- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏° -->
      <div >
        <label for="editStart">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô : </label>
        <input id="editStart" type="datetime-local" style="width: 80%; height: 35px" class="swal2-input" value="${eventStart.format(
          "YYYY-MM-DDTHH:mm"
        )}" />
      </div><br>
  
      <!-- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î -->
      <div>
        <label for="editEnd">‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î : </label>
        <input id="editEnd" type="datetime-local" style="width: 80%; height: 35px" class="swal2-input" value="${formattedEnd}" />
      </div><br>
  `;

    Swal.fire({
      title: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô: ${eventSite}`,
      html: htmlEdit,
      customClass: "swal-wide",
      showCloseButton: true,
      didOpen: () => {
        new TomSelect("#editStatus", {
          create: false, // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
          placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó",
          sortField: {
            field: "text",
            direction: "asc",
          },
        });

        new TomSelect("#editCompany", {
          create: true, // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
          placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó",
          sortField: {
            field: "text",
            direction: "asc",
          },
        });

        new TomSelect("#editSite", {
          create: true, // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
          placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£",
          sortField: {
            field: "text",
            direction: "asc",
          },
        });

        new TomSelect("#editTitle", {
          create: true, // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
          placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠",
          sortField: {
            field: "text",
            direction: "asc",
          },
        });

        new TomSelect("#editSystem", {
          create: true, // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
          placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö",
          sortField: {
            field: "text",
            direction: "asc",
          },
        });

        new TomSelect("#editTime", {
          create: false, // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
          sortField: {
            field: "text",
            direction: "asc",
          },
        });

        document
          .getElementById("backgroundColorPickerContainer")
          .appendChild(inputBackgroundColor);
        document
          .getElementById("textColorPickerContainer")
          .appendChild(inputTextColor);
      },
      showDenyButton: true,
      showCancelButton: true,
      confirmButtonColor: "#0ECC00",
      confirmButtonText: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á",
      denyButtonText: "‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô",
      // cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô",
      showExtraButton: true,
      didRender: () => {
        const pdfButton = document.createElement("button");
        pdfButton.innerText = "‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô";
        pdfButton.className = "swal2-confirm swal2-styled";
        pdfButton.style.backgroundColor = "#6c757d"; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
        pdfButton.style.marginLeft = "10px";
        pdfButton.onclick = () => generateWorkPermitPDF(eventInfo.event);
        Swal.getActions().appendChild(pdfButton);
      },
      preConfirm: () => {
        const company = document.getElementById("editCompany").value;
        const site = document.getElementById("editSite").value;
        const title = document.getElementById("editTitle").value;
        const system = document.getElementById("editSystem").value;
        const time = document.getElementById("editTime").value;
        const textColor = inputTextColor.value;
        const backgroundColor = inputBackgroundColor.value;
        const fontSize = eventFontSize;
        const status = document.getElementById("editStatus").value;
        const start = moment(
          document.getElementById("editStart").value
        ).toISOString();
        let end = document.getElementById("editEnd").value;
        if (!end) {
          end = eventEnd.toISOString();
        } else {
          end = eventAllDay
            ? moment(end).add(1, "days").toISOString()
            : moment(end).toISOString();
        }
        if (!title) {
          Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô");
        }
        // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö flag manualStatus: true
        return {
          id: eventId,
          company,
          site,
          title,
          system,
          time,
          textColor,
          backgroundColor,
          fontSize,
          status,
          start,
          end,
          manualStatus: true,
        };
      },
    }).then(async (result) => {
      if (result.isConfirmed) {
        setLoading(true);
        const {
          id,
          company,
          site,
          title,
          system,
          time,
          textColor,
          backgroundColor,
          fontSize,
          status,
          start,
          end,
          manualStatus,
        } = result.value;

        const updatedEvent = {
          company,
          site,
          title,
          system,
          time,
          textColor,
          backgroundColor,
          fontSize,
          status,
          start,
          end,
          manualStatus, // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö level ‡∏ö‡∏ô‡∏™‡∏∏‡∏î
          extendedProps: { manualStatus },
        };

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï event ‡πÉ‡∏ô FullCalendar
        eventInfo.event.setProp("textColor", textColor);
        eventInfo.event.setProp("backgroundColor", backgroundColor);
        eventInfo.event.setExtendedProp("status", status);
        eventInfo.event.setExtendedProp("manualStatus", manualStatus);

        setEvents((prevEvents) =>
          prevEvents.map((event) => (event.id === id ? updatedEvent : event))
        );

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        await EventService.UpdateEvent(id, updatedEvent);
        await fetchEventsFromDB();
        setLoading(false);

        Swal.fire({
          title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          icon: "success",
          showConfirmButton: false,
          timer: 1000,
        });
      } else if (result.isDenied) {
        handleDeleteEvent(eventId);
      }
      // else if (result.dismiss === Swal.DismissReason.cancel) {
      //   confirmCancelEvent(eventId);
      // }
    });
  };

  // const confirmCancelEvent = async (eventId) => {
  //   Swal.fire({
  //     title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô?",
  //     text: "‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á",
  //     icon: "warning",
  //     showCancelButton: true,
  //     confirmButtonColor: "#d33",
  //     cancelButtonColor: "#3085d6",
  //     confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô",
  //     cancelButtonText: "‡πÑ‡∏°‡πà, ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ",
  //   }).then(async (result) => {
  //     if (result.isConfirmed) {
  //       handleCancelEvent(eventId);
  //     }
  //   });
  // };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å FullCalendar ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const handleCancelEvent = async (eventId) => {
    setLoading(true);

    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å events
      const eventToCancel = events.find((event) => event.id === eventId);
      if (!eventToCancel) {
        console.warn("‚ö† Event not found for cancellation");
        return;
      }

      // ‡∏•‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
      setEvents((prevEvents) =>
        prevEvents.filter((event) => event.id !== eventId)
      );

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      setEventReceive((prevEvents) => [
        ...prevEvents,
        { ...eventToCancel, id: eventToCancel.id || generateTemporaryId() },
      ]);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
      await EventService.DeleteEvent(eventId);

      // Swal.fire({
      //   title: "Event Moved to Unscheduled",
      //   icon: "info",
      //   showConfirmButton: false,
      //   timer: 1000,
      // });
    } catch (error) {
      console.error("‚ùå Error in handleCancelEvent:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleEventDrop = async (arg) => {
    const event = arg.event;

    const start = moment(event.startStr);
    const end = moment(event.endStr);

    let newEnd;

    if (start.isSame(end, "day")) {
      newEnd = end;
    } else {
      newEnd = end.subtract(1, "days");
    }

    const updatedEvent = {
      id: event.id,
      title: event.title,
      textColor: event.textColor,
      backgroundColor: event.backgroundColor,
      fontSize: event.extendedProps.fontSize.toString(),
      start: event.startStr,
      end: event.endStr, // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö allDay ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î end
      allDay: event.allDay,
    };

    try {
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await EventService.UpdateEvent(event.id, updatedEvent);

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ events ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ map
      setEvents((prevEvents) =>
        Array.isArray(prevEvents)
          ? prevEvents.map((e) => (e.id === updatedEvent.id ? updatedEvent : e))
          : [updatedEvent]
      );

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      await fetchEventsFromDB();

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      // Swal.fire("Event Updated", "", "success");
    } catch (error) {
      console.error("Error updating event:", error);
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
      Swal.fire("Error", "Failed to update event", "error");
    }
  };

  const handleEventResize = async (arg) => {
    const event = arg.event;

    const start = moment(event.startStr);
    const end = moment(event.endStr);

    let newEnd;

    if (start.isSame(end, "day")) {
      newEnd = end; // ‡πÉ‡∏ä‡πâ end ‡∏ï‡∏£‡∏á‡πÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    } else {
      newEnd = end;
    }

    const updatedEvent = {
      id: event.id,
      title: event.title,
      textColor: event.textColor,
      backgroundColor: event.backgroundColor,
      fontSize: event.extendedProps.fontSize.toString(),
      start: event.startStr,
      end: event.allDay ? newEnd.format("YYYY-MM-DD: HH:mm") : newEnd.format(), // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö allDay ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î end
      allDay: event.allDay,
    };

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await EventService.UpdateEvent(event.id, updatedEvent);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ events ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ map
    setEvents((prevEvents) =>
      Array.isArray(prevEvents)
        ? prevEvents.map((e) => (e.id === updatedEvent.id ? updatedEvent : e))
        : [updatedEvent]
    );

    await fetchEventsFromDB();

    // Swal.fire("Event Updated", "", "success");
  };

  const handleDeleteEvent = (id) => {
    try {
      Swal.fire({
        title: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
        text: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô",
        cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      }).then(async (result) => {
        if (result.isConfirmed) {
          setLoading(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

          try {
            // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
            await EventService.DeleteEvent(id);

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÇ‡∏î‡∏¢‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
            setEvents((prevEvents) =>
              prevEvents.filter((event) => event._id !== id)
            );

            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await fetchEventsFromDB();

            setLoading(false);

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            Swal.fire({
              title: "‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
              text: "‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
              icon: "success",
              showConfirmButton: false,
              timer: 1500,
            });
          } catch (error) {
            console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô:", error);
            Swal.fire({
              title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
              text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
              icon: "error",
            });
          } finally {
            setLoading(false);
          }
        }
      });
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô:", error);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const handleLineNotify = () => {
    const html = `
        <label for="description">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ô‡∏µ‡πâ : </label> <br>
        <input id="description" class="swal2-input"  type="text"  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"
        style="margin-bottom: 2rem width: auto"> <br /> 
        
        
      
      `;
    try {
      Swal.fire({
        title: "‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà Line Notify",
        icon: "question",
        html: html,
        width: "475px",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Confirm",

        preConfirm: () => {
          const description = document.getElementById("description").value;

          return {
            description,
          };
        },
      }).then(async (result) => {
        if (result.isConfirmed) {
          const description = result.value;

          console.log(description);
          await EventService.LineNotify(description);

          Swal.fire({
            title: "‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Line ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            icon: "success",
          });
        }
      });

      // .then(async (result) => {
      //   if (result.isConfirmed) {
      //     await EventService.LineNotify();
      //     Swal.fire({
      //       title: "‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Line ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      //       icon: "success",
      //     });
      //   }
      // });
    } catch (error) {
      console.error("Error deleting event:", error);
    }
  };

  const calendarRef = useRef(null);

  const options = {
    // default is `save`
    method: "save",
    // default is Resolution.MEDIUM = 3, which should be enough, higher values
    // increases the image quality but also the size of the PDF, so be careful
    // using values higher than 10 when having multiple pages generated, it
    // might cause the page to crash or hang.
    resolution: Resolution.HIGH,
    page: {
      // margin is in MM, default is Margin.NONE = 0
      margin: Margin.SMALL,
      // default is 'A4'
      format: "a4",
      // default is 'portrait'
      orientation: "portrait",
    },
    canvas: {
      // default is 'image/jpeg' for better size performance
      mimeType: "image/png",
      qualityRatio: 1,
    },
    // Customize any value passed to the jsPDF instance and html2canvas
    // function. You probably will not need this and things can break,
    // so use with caution.
    overrides: {
      // see https://artskydj.github.io/jsPDF/docs/jsPDF.html for more options
      pdf: {
        compress: true,
      },
      // see https://html2canvas.hertzen.com/configuration for more options
      canvas: {
        useCORS: true,
      },
    },
  };

  const generatePdf = async () => {
    setLoading(true);

    try {
      const getTargetElement = () => document.getElementById("content-id");

      await generatePDF(getTargetElement, options);
      setLoading(false);
    } catch (error) {
      console.log(error);
    }
  };

  const [currentPage, setCurrentPage] = useState(1);
  const [eventsPerPage, setEventsPerPage] = useState(8); // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô event ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    const updateEventsPerPage = () => {
      if (window.innerWidth < 768) {
        setEventsPerPage(5); // ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å
      } else {
        setEventsPerPage(8); // ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà
      }
    };

    updateEventsPerPage(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    window.addEventListener("resize", updateEventsPerPage); // ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î

    return () => window.removeEventListener("resize", updateEventsPerPage); // ‡∏•‡∏ö event listener ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
  }, []);

  const sortedEvents = [...eventReceive].sort((a, b) => {
    const dateA = a.createdAt
      ? moment(a.createdAt)
      : a._id
      ? moment(a._id?.toString().substring(0, 8), "hex")
      : moment(0);

    const dateB = b.createdAt
      ? moment(b.createdAt)
      : b._id
      ? moment(b._id?.toString().substring(0, 8), "hex")
      : moment(0);

    return dateB.diff(dateA); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
  });

  // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
  const filteredEvents = sortedEvents.filter((event) =>
    event.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Pagination ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
  const totalPages = Math.ceil(filteredEvents.length / eventsPerPage);
  const startIndex = (currentPage - 1) * eventsPerPage;
  const endIndex = startIndex + eventsPerPage;
  const paginatedEvents = filteredEvents.slice(startIndex, endIndex);

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô totalPages ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  useEffect(() => {
    if (currentPage > totalPages && totalPages > 0) {
      setCurrentPage(totalPages);
    }
  }, [filteredEvents, totalPages, currentPage]);

  const handleDatesSet = (info) => {
    const newMonth = moment(info.start).format("YYYY-MM");
    setCurrentMonth(newMonth);
  };

  const handleHighlightWeekends = () => {
    setTimeout(() => {
      document.querySelectorAll(".fc-daygrid-day").forEach((cell) => {
        const dateStr = cell.getAttribute("data-date"); // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å attribute
        const date = moment(dateStr);
        const currentMonth = moment(
          calendarRef.current.getApi().getDate()
        ).month(); // ‡∏î‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á
        const isSaturday = date.isoWeekday() === 6;
        const isSunday = date.isoWeekday() === 7;
        const isSameMonth = date.month() === currentMonth; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô
        cell.style.backgroundColor = "";

        // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if ((isSaturday || isSunday) && isSameMonth) {
          cell.style.backgroundColor = "#FFFFF4"; // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
        }
      });
    }, 0); // ‡πÉ‡∏ä‡πâ setTimeout(0) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å FullCalendar render ‡πÄ‡∏™‡∏£‡πá‡∏à
  };

  const filteredCalendarEvents = events.filter((event) => {
    const keyword = searchTerm.toLowerCase();
    return (
      event.title?.toLowerCase().includes(keyword) ||
      event.extendedProps?.site?.toLowerCase().includes(keyword) ||
      event.extendedProps?.company?.toLowerCase().includes(keyword) ||
      event.extendedProps?.system?.toLowerCase().includes(keyword) ||
      event.extendedProps?.time?.toString().includes(keyword)
    );
  });

  return (
    <div>
      <Row className="flex-wrap mb-3 d-flex justify-content-center justify-content-md-between">
        <Col className="col-12 col-md-5 col-lg">
          <button className="btn btn-sm btn-danger" onClick={generatePdf}>
            <FontAwesomeIcon icon={faFilePdf} /> ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
          </button>
          <CSVLink
            data={
              events
                ? Object.values(events)
                    .sort((a, b) => new Date(a.start) - new Date(b.start)) // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
                    .map((event) => ({
                      Date: moment(event.start).format("YYYY-MM-DD"), // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                      Title: event.title, // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå

                      AllDay: event.allDay ? "Yes" : "No", // ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô
                    }))
                : null
            }
            filename={"events.csv"}
          >
            <button className="btn btn-sm btn-success mx-1 m-2 ">
              <FontAwesomeIcon icon={faFileExcel} /> ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel
            </button>
          </CSVLink>

          {/* <button
            className="btn btn-sm btn-secondary mx-1 "
            onClick={handleLineNotify}
          >
            <FontAwesomeIcon icon={faBell} /> LINE NOTIFY
          </button> */}
        </Col>
      </Row>
      {/* {isAdmin && (
        <div
          className="card p-2 mb-4 mt-4"
          style={{ background: "#f8f9fa", borderRadius: "8px", width: "100%" }}
        >
          <h5 className="mb-3">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</h5>
          <form onSubmit={handleAddEventReceive} className="d-flex gap-2 p-2">
            <input
              type="text"
              className="form-control form-control-sm"
              placeholder="Enter event title"
              value={newEventTitle}
              onChange={(e) => setNewEventTitle(e.target.value)}
              style={{ width: "100%", fontSize: "14px", padding: "6px" }} // ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢ input ‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
            />
            <button
              type="submit"
              className="btn btn-primary btn-sm"
              style={{
                fontSize: "14px",
                padding: "6px 12px",
                whiteSpace: "nowrap",
              }}
            >
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
            </button>
          </form>
        </div>
      )} */}
      {isAdmin && (
        <div
          id="external-events"
          style={{ padding: "8px", background: "#f8f9fa", width: "100%" }}
          className="mb-4"
        >
          {/* <h5 className="mb-2 p-2">‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á</h5>

          <div className="input-group mb-2 p-2">
            <span className="input-group-text bg-white border border-secondary">
              <FontAwesomeIcon icon={faSearch} className="text-muted" />
            </span>
            <input
              type="search"
              className="form-control form-control-sm border border-secondary"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              style={{ fontSize: "14px", padding: "6px" }}
            />
          </div> */}
          <div className="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-2 p-2">
            {paginatedEvents.map((event) => (
              <div
                key={event._id || event.id}
                className="col d-flex align-items-center gap-2 mb-2"
              >
                <div
                  className="fc-event flex-grow-1 text-white d-flex align-items-center justify-content-between px-3 py-2"
                  data-event-id={event._id || event.id}
                  onClick={() => handleAddEventToCalendar(event)}
                  style={{
                    background: event.backgroundColor || "#0c49ac",
                    borderRadius: "5px",
                    fontSize: "11px",
                    width: "100%",
                    overflow: "hidden",
                    textAlign: "center",
                    cursor: "pointer",
                  }}
                >
                  <span>{event.title}</span>
                </div>

                <button
                  className="btn btn-danger btn-sm d-flex align-items-center justify-content-center"
                  onClick={() =>
                    handleDeleteEventReceive(event._id || event.id)
                  }
                  style={{
                    width: "25px",
                    height: "25px",
                    borderRadius: "50%",
                  }}
                >
                  <FontAwesomeIcon icon={faTimes} className="text-white" />
                </button>
              </div>
            ))}
          </div>

          {/* {totalPages > 1 && (
            <div className="d-flex justify-content-center mt-2">
              <button
                className="btn btn-outline-primary btn-sm me-1"
                onClick={() => setCurrentPage(currentPage - 1)}
                disabled={currentPage === 1}
              >
                ¬´
              </button>
              <span className="mx-1">
                {currentPage} / {totalPages}
              </span>
              <button
                className="btn btn-outline-primary btn-sm ms-1"
                onClick={() => setCurrentPage(currentPage + 1)}
                disabled={currentPage === totalPages}
              >
                ¬ª
              </button>
            </div>
          )} */}
        </div>
      )}
      <div className="mb-3">
        <input
          type="search"
          className="form-control"
          placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ‡∏£‡∏∞‡∏ö‡∏ö..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>
      <div id="content-id" style={{ flex: 1, width: "100%" }}>
        <FullCalendar
          ref={calendarRef}
          locales={[thLocale]} // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
          locale="th" // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          plugins={[
            dayGridPlugin,
            interactionPlugin,
            timeGridPlugin,
            momentTimezonePlugin,
            listPlugin,
          ]}
          initialView="dayGridMonth"
          editable={isAdmin}
          selectable={isAdmin}
          droppable={isAdmin}
          dateClick={isAdmin ? handleAddEvent : null}
          eventClick={isAdmin ? handleEditEvent : null}
          eventDrop={isAdmin ? handleEventDrop : null}
          eventResize={isAdmin ? handleEventResize : null}
          events={filteredCalendarEvents}
          allDaySlot={true}
          nowIndicator={true}
          selectMirror={true}
          weekends={true}
          contentHeight="auto"
          showNonCurrentDates={false} // ‚úÖ ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á
          firstDay={0} // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
          eventReceive={handleEventReceive} // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î eventReceive
          eventContent={(arg) => {
            const { title, extendedProps } = arg.event;
            const { system = "", time = "", site = "" } = extendedProps;

            const timeDisplay = time ? `‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${time}` : "";
            return {
              html: `
              [ ${title} ]
              ${system} ${timeDisplay}
              ${site}
            `,
            };
          }}
          headerToolbar={{
            left: "prev,next",
            center: "title",
            right: "today",
          }}
          footerToolbar={{
            right: "dayGridMonth,timeGridWeek,listWeek",
            // right: "dayGridMonth,timeGridWeek,timeGridDay,listWeek",
          }}
          customButtons={{
            prev: {
              text: "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö",
              click: () => calendarRef.current.getApi().prev(),
            },
            next: {
              text: "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
              click: () => calendarRef.current.getApi().next(),
            },
            today: {
              text: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
              click: () => calendarRef.current.getApi().today(),
            },
          }}
          datesSet={handleHighlightWeekends} // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
          buttonText={{
            today: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
            month: "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
            week: "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
            day: "‡∏ß‡∏±‡∏ô",
            list: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
          }}
          views={{
            listWeek: { dayMaxEventRows: window.innerWidth >= 576 ? 7 : 5 },
            dayGridMonth: { dayMaxEventRows: window.innerWidth >= 576 ? 7 : 5 },
            timeGridWeek: { dayMaxEventRows: window.innerWidth >= 576 ? 7 : 5 },
            timeGridDay: { dayMaxEventRows: window.innerWidth >= 576 ? 7 : 5 },
          }}
          eventDidMount={(info) => {
            const status = info.event.extendedProps.status;
            const icon = getStatusIcon(status);
            const statusDescription = {
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
              ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
            };

            if (icon) {
              // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
              const isSmallScreen = window.innerWidth < 768; // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å

              // ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á Event
              const backgroundColor = info.event.backgroundColor || "#ffffff"; // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
              const textColor = info.event.textColor || "#000000"; // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠

              // ‚úÖ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
              const iconSize = isSmallScreen ? "10px" : "15px"; // üìå ‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î 10px, ‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î 16px
              const padding = isSmallScreen
                ? "10px 0px 2px 2px" // üìå ‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å
                : "10px 0px 3px 3px"; // üìå ‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà

              // üîπ ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á container ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á event (‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô)
              info.el.style.position = "relative"; // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÉ‡∏ä‡πâ absolute ‡πÑ‡∏î‡πâ
              info.el.style.display = "flex";
              info.el.style.alignItems = "center"; // ‚úÖ ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
              info.el.style.padding = `${padding}`; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Padding ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠

              // üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á div ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
              const iconContainer = document.createElement("div");
              iconContainer.style.position = "absolute";
              iconContainer.style.right = "2px"; // ‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
              iconContainer.style.top = "1px"; // ‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
              iconContainer.style.width = iconSize; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
              iconContainer.style.height = iconSize;
              iconContainer.style.display = "flex";
              iconContainer.style.alignItems = "center";
              iconContainer.style.justifyContent = "center";
              iconContainer.style.backgroundColor = `${backgroundColor}`; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á event
              iconContainer.style.cursor = "pointer"; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô pointer ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô tooltip
              iconContainer.style.zIndex = "10"; // ‚úÖ ‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤
              iconContainer.title = statusDescription[status] || "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"; // ‚úÖ Tooltip

              // üîπ ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÉ‡∏ô FullCalendar
              ReactDOM.createRoot(iconContainer).render(
                <FontAwesomeIcon
                  icon={icon}
                  style={{
                    fontSize: isSmallScreen ? "8px" : "12px", // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î icon ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                    color: textColor, // ‚úÖ ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                  }}
                />
              );

              // üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà event container
              info.el.appendChild(iconContainer);
            }
          }}
          dayCellDidMount={(info) => {
            const date = moment(info.date); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô moment object
            const currentMonth = moment(info.view.currentStart).month(); // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
            const isSaturday = date.isoWeekday() === 6; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå
            const isSunday = date.isoWeekday() === 7; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
            const isSameMonth = date.month() === currentMonth; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

            // ‚úÖ ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if ((isSaturday || isSunday) && isSameMonth) {
              info.el.style.backgroundColor = "#FFFFF4"; // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
            }
          }}
        />
        <style>
          {`
          @media (max-width: 768px) {
            .fc-header-toolbar {
              display: flex;
              flex-direction: column;
              width: 100%;
              gap: 8px;
            }
            .fc-toolbar-chunk {
              display: flex;
              justify-content: space-between;
              width: 100%;
        font-size: 12px !important; /* ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ */
            }
            .fc-toolbar-title {
              flex: 1;
              text-align: center;
              font-size: 1.5em;
              margin: 0;
            }
            .fc-button {
              flex: 1;
              min-width: 0;
              margin: 2px;
            }
            .fc-button-group {
              display: flex;
              width: 100%;
            }
            .fc-button-group .fc-button {
              flex: 1;
            }
            .fc-footer-toolbar {
              display: flex;
              justify-content: center;
              width: 100%;
              margin-top: 5px;
            }
          }
.legend-item {
      display: flex;
      align-items: center;
      gap: 6px;
      font-size: 14px;
    }

    .legend-color {
      width: 14px;
      height: 14px;
      border-radius: 3px;
    }

    @media (max-width: 768px) {
      .color-legend-container {
        justify-content: left; /* ‚úÖ ‡∏à‡∏±‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å */
      }

      .color-legend {
        justify-content: left;
        flex-direction: column;
        font-size: 12px;
        gap: 10px;
      }
    }
        `}
        </style>
        {/* ‚úÖ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô (Legend) */}
        <div
          className="color-legend-container"
          style={{
            display: "flex",
            justifyContent: "left",
            alignItems: "left",
            flexWrap: "wrap",
            padding: "8px",
            borderRadius: "8px",
            width: "100%",
          }}
        >
          <div
            className="color-legend"
            style={{ display: "flex", gap: "15px", flexWrap: "wrap" }}
          >
            <div
              className="legend-item"
              style={{ display: "flex", alignItems: "center", gap: "8px" }}
            >
              <FontAwesomeIcon
                icon={faHourglassHalf}
                style={{ color: "#FF5733" }}
              />
              <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</span>
            </div>

            <div
              className="legend-item"
              style={{ display: "flex", alignItems: "center", gap: "8px" }}
            >
              <FontAwesomeIcon icon={faCheck} style={{ color: "#0c49ac" }} />
              <span>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
            </div>

            <div
              className="legend-item"
              style={{ display: "flex", alignItems: "center", gap: "8px" }}
            >
              <FontAwesomeIcon
                icon={faClockRotateLeft}
                style={{ color: "#a1b50b" }}
              />
              <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</span>
            </div>

            <div
              className="legend-item"
              style={{ display: "flex", alignItems: "center", gap: "8px" }}
            >
              <FontAwesomeIcon
                icon={faCheckDouble}
                style={{ color: "#18b007" }}
              />
              <span>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</span>
            </div>
          </div>
        </div>
      </div>

      {loading && (
        <div className="loading-overlay">
          <ThreeDots type="ThreeDots" color="#007bff" height={50} width={50} />
        </div>
      )}
    </div>
  );
}

export default EventCalendar;
