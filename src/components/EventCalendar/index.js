import React, { useState, useEffect, useRef } from "react";
import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid"; // for dayClick
import momentTimezonePlugin from "@fullcalendar/moment-timezone";

import interactionPlugin, { Draggable } from "@fullcalendar/interaction"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Draggable

import listPlugin from "@fullcalendar/list";

import { saveAs } from "file-saver";

import * as XLSX from "xlsx";

import Swal from "sweetalert2";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome"; // Import FontAwesomeIcon component

import {
  faBell,
  faFileExcel,
  faFilePdf,
  faPlus,
} from "@fortawesome/free-solid-svg-icons"; // Import ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ

import EventService from "../../services/EventService";
import EventReceiveService from "../../services/EventReceiveService";
import fetchHolidayService from "../../services/fetchHolidayService";
import moment from "moment";

import { ThreeDots } from "react-loader-spinner";

import generatePDF, { Resolution, Margin } from "react-to-pdf";

import { Col, Row } from "reactstrap";

import { CSVLink } from "react-csv";

import "./index.css";

import API from "../../API/axiosInstance";

import { toast } from "react-toastify"; // ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ react-toastify

import { faTimes } from "@fortawesome/free-solid-svg-icons";
import { faSearch } from "@fortawesome/free-solid-svg-icons";

function EventCalendar() {
  const [events, setEvents] = useState([]);
  const [newEventTitle, setNewEventTitle] = useState(""); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input

  const [eventReceive, setEventReceive] = useState([]);
  const [defaultAllDay, setdefaultAllDay] = useState(true); // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const [defaultTextColor, setDefaultTextColor] = useState("#FFFFFF"); // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const [defaultBackgroundColor, setDefaultBackgroundColor] =
    useState("#0c49ac"); // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

  const [defaultFontSize, setDefaultFontSize] = useState(8); //

  const [loading, setLoading] = useState(false); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î

  const [searchTerm, setSearchTerm] = useState(""); // üîç State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

  let isProcessing = false; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥

  useEffect(() => {
    fetchEventsFromDB();
    fetchEventReceiveFromDB();
    initExternalEvents(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏á component
  }, []);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ External Events ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ
  const initExternalEvents = () => {
    let containerEl = document.getElementById("external-events");
    if (containerEl) {
      new Draggable(containerEl, {
        itemSelector: ".fc-event",
        eventData: (eventEl) => {
          return {
            title: eventEl.innerText.trim(), // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á event
          };
        },
      });
    }
  };

  const fetchEventReceiveFromDB = async () => {
    setLoading(true);
    try {
      const res = await EventReceiveService.getEvents();
      const eventsWithId = res.userEvents.map((eventReceive) => ({
        ...eventReceive,
        id: eventReceive._id || eventReceive.id,
        extendedProps: { _id: eventReceive._id || eventReceive.id }, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° _id ‡πÉ‡∏ô extendedProps
      }));

      setEventReceive(eventsWithId);
    } catch (error) {
      console.error("‚ùå Error fetching events:", error);
      toast.error("Failed to load events. Please try again later."); // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô error
    } finally {
      setLoading(false);
    }
  };
  const saveEventReceiveToDB = async (newEvent) => {
    try {
      // console.log("üîç Sending data to API:", JSON.stringify(newEvent, null, 2));

      const response = await EventReceiveService.AddEvent(newEvent);

      return response.data;
    } catch (error) {
      console.error(
        "‚ùå Error saving event to DB:",
        error.response?.data || error.message
      );
      throw error;
    }
  };
  const deleteEventFromDB = async (eventId) => {
    try {
      // console.log(`üóë Attempting to delete event ID: ${eventId}`); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ID ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

      const response = await API.delete(`/eventReceive/${eventId}`);

      // console.log("üì© Response from server:", response);

      if (response.status === 200) {
        // console.log(`‚úÖ Event ${eventId} deleted successfully`);
      } else {
        console.warn(
          `‚ö† Event ${eventId} deletion failed, status: ${response.status}`
        );
      }
    } catch (error) {
      console.error(
        `‚ùå Error deleting event ${eventId}:`,
        error.response?.data || error
      );
    }
  };

  const handleAddEventReceive = async (event) => {
    event.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ reload ‡∏´‡∏ô‡πâ‡∏≤

    if (!newEventTitle.trim()) return; // ‡∏ñ‡πâ‡∏≤ input ‡∏ß‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£

    const newEvent = { title: newEventTitle };

    try {
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° event ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ UI
      setEventReceive((prevEvents) => [...prevEvents, newEvent]);

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const savedEvent = await saveEventReceiveToDB(newEvent);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      // if (!savedEvent) {
      //   console.warn("‚ö†Ô∏è API ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      // }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ _id ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏° _id ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      if (savedEvent && !savedEvent._id) {
        savedEvent._id = generateTemporaryId(); // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ ID
      }

      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å DB
      await fetchEventReceiveFromDB();
      await fetchEventsFromDB();

      // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå input ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå
      setNewEventTitle("");
    } catch (error) {
      console.error("‚ùå Error handling event addition:", error);
    }
  };
  const handleEventReceive = async (info) => {
    if (isProcessing) {
      console.warn("‚ö† Function is already running, skipping duplicate call.");
      return;
    }

    isProcessing = true;

    try {
      const droppedEvent = info.event;
      const draggedEl = info.draggedEl;

      if (!droppedEvent.start) {
        console.error("‚ùå Dropped event has no start date.");
        return;
      }

      // ‚úÖ ‡∏î‡∏∂‡∏á `_id` ‡∏Ç‡∏≠‡∏á event ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏≤‡∏Å
      let eventIdToDelete = droppedEvent.extendedProps?._id || droppedEvent.id;
      if (!eventIdToDelete) {
        eventIdToDelete =
          draggedEl?.dataset?.eventId ||
          draggedEl?.getAttribute("data-event-id");
      }

      if (!eventIdToDelete) {
        console.error("‚ö† Event ID is missing. Skipping deletion.");
        return;
      }

      // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å event ‡πÉ‡∏´‡∏°‡πà
      await deleteEventFromDB(eventIdToDelete);

      // ‚úÖ ‡∏•‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `eventReceive`
      setEventReceive((prevEvents) =>
        prevEvents.filter((event) => event._id !== eventIdToDelete)
      );

      // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ start, end ‡πÅ‡∏•‡∏∞ date
      const startDate = moment(droppedEvent.start).format("YYYY-MM-DD");
      const endDate = droppedEvent.end
        ? moment(droppedEvent.end).format("YYYY-MM-DD")
        : moment(startDate).add(1, "days").format("YYYY-MM-DD");

      const newEvent = {
        title: droppedEvent.title || "Untitled Event",
        backgroundColor: droppedEvent.backgroundColor || "#0c49ac",
        textColor: droppedEvent.textColor || "#ffffff",
        fontSize: droppedEvent.extendedProps?.fontSize
          ? droppedEvent.extendedProps.fontSize.toString()
          : "8",
        start: startDate,
        end: endDate, // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ end ‡πÄ‡∏™‡∏°‡∏≠
        date: startDate, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° date ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Schema
        allDay: droppedEvent.allDay ?? true,
      };

      // console.log("‚úÖ New Event Data:", newEvent);

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const response = await saveEventToDB(newEvent);

      if (response && response._id) {
        newEvent._id = response._id;
        newEvent.extendedProps = { _id: response._id };
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï events ‡πÉ‡∏ô FullCalendar
      setEvents((prevEvents) => [...prevEvents, newEvent]);

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await fetchEventReceiveFromDB();
      await fetchEventsFromDB();
    } catch (error) {
      console.error("‚ùå Error in handleEventReceive:", error);
    } finally {
      isProcessing = false;
    }
  };
  const handleAddEventToCalendar = async (eventData) => {
    Swal.fire({
      title: `${eventData.title || "Untitled Event"} `, // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å
      customClass: "swal-wide",

      html: `
        <label for="startDate">Start Date:</label>
        <input id="startDate" type="date" class="swal2-input" style="margin-bottom: 1rem; width: 250px"><br>
    
        <label for="endDate">End Date:</label>
        <input id="endDate" type="date" class="swal2-input" style="margin-bottom: 1rem; width: 250px">
      `,
      showCancelButton: true,
      confirmButtonText: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á",
      preConfirm: () => {
        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;

        if (!startDate || !endDate) {
          Swal.showValidationMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î");
          return false;
        }

        if (moment(endDate).isBefore(moment(startDate))) {
          Swal.showValidationMessage("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô");
          return false;
        }

        return { startDate, endDate };
      },
    }).then(async (result) => {
      if (result.isConfirmed) {
        const { startDate, endDate } = result.value;

        if (!startDate || !endDate) {
          Swal.fire("Error", "Start date and end date are required!", "error");
          return;
        }

        const start = moment(startDate).format("YYYY-MM-DD");
        const end = moment(endDate).add(1, "days").format("YYYY-MM-DD"); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° 1 ‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        // console.log("üìÖ New Event Data:", { start, end, date: start });

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Event ‡∏•‡∏á FullCalendar
        const newEvent = {
          title: eventData.title,
          start: start,
          end: end,
          date: start, // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ date ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Mongoose ‡πÑ‡∏°‡πà error
          backgroundColor: eventData.backgroundColor || "#0c49ac",
          textColor: eventData.textColor || "#ffffff",
          fontSize: eventData.fontSize || "12",
          allDay: true,
        };

        try {
          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏Ç‡∏≠‡∏á FullCalendar
          setEvents((prevEvents) => [...prevEvents, newEvent]);

          // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          await saveEventToDB(newEvent);

          // ‚úÖ ‡∏•‡∏ö Event ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `eventReceive`
          setEventReceive((prevEvents) =>
            prevEvents.filter((event) => event._id !== eventData._id)
          );

          // ‚úÖ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á `eventReceive`
          await deleteEventFromDB(eventData._id);

          Swal.fire({
            title: "Added!",
            text: "Event added successfully.",
            icon: "success",
            timer: 1500,
            showConfirmButton: false,
          });

          // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          await fetchEventsFromDB();
        } catch (error) {
          console.error("‚ùå Error adding event:", error);
          Swal.fire("Error", "Failed to add event. Please try again.", "error");
        }
      }
    });
  };

  const handleDeleteEventReceive = async (eventId) => {
    try {
      Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to undo this action!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, delete it!",
        cancelButtonText: "Cancel",
      }).then(async (result) => {
        if (result.isConfirmed) {
          // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          await deleteEventFromDB(eventId);

          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state eventReceive (‡∏•‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å)
          setEventReceive((prevEvents) => {
            const updatedEvents = prevEvents.filter(
              (event) => event._id !== eventId
            );

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const totalItemsLeft = updatedEvents.length;
            const maxPages = Math.ceil(totalItemsLeft / eventsPerPage);

            if (totalItemsLeft <= startIndex && currentPage > 1) {
              setCurrentPage(Math.max(1, currentPage - 1)); // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            }

            return updatedEvents;
          });

          // Swal.fire({
          //   title: "Deleted!",
          //   text: "The event has been deleted.",
          //   icon: "success",
          //   timer: 1500,
          //   showConfirmButton: false,
          // });
        }
      });
    } catch (error) {
      console.error("‚ùå Error deleting event:", error);
      Swal.fire({
        title: "Error!",
        text: "Failed to delete event. Please try again.",
        icon: "error",
      });
    }
  };

  const fetchThaiHolidaysFromAPI = async () => {
    try {
      const response = await API.get(`/holidays`);
      // console.log("API Response:", response.data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á API response

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response.data ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (response.data) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á response.data
        // console.log("Complete Data Structure:", JSON.stringify(response.data, null, 2));  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if (response.data && Array.isArray(response.data)) {
          // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô response.data ‡πÄ‡∏õ‡πá‡∏ô Array
          const holidays = response.data.map((holiday) => ({
            title: holiday.HolidayDescriptionThai,
            start: holiday.Date, //
            color: "#FF0000", // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ
          }));

          // console.log("Mapped Holidays for Calendar:", holidays);  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å map
          return holidays;
        } else {
          console.error(
            "Invalid structure, 'result.data' missing or incorrect."
          );
          return [];
        }
      } else {
        console.error("No data found in API response.");
        return [];
      }
    } catch (error) {
      console.error("Error fetching holidays from API:", error.message);
      return [];
    }
  };

  const fetchEventsFromDB = async () => {
    setLoading(true);
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• events ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const res = await EventService.getEvents();
      const eventsWithId = res.userEvents.map((event) => ({
        ...event,
        id: event._id,
      }));

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å API
      const thaiHolidays = await fetchThaiHolidaysFromAPI();
      // console.log("Fetched holidays:", thaiHolidays);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (thaiHolidays.length > 0) {
        const combinedEvents = [
          ...eventsWithId,
          ...thaiHolidays.map((holiday) => ({
            ...holiday,
            fontSize: defaultFontSize.extendedProps, // Apply default font size
          })),
        ]; // console.log("Combined events:", combinedEvents); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state
        setEvents(combinedEvents);
      } else {
        console.log("No holidays found, only user events will be displayed.");
        setEvents(eventsWithId);
      }
    } catch (error) {
      console.error("Error fetching events or holidays:", error);
    } finally {
      setLoading(false);
    }
  };

  const saveEventToDB = async (newEvent) => {
    try {
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ start, end, ‡πÅ‡∏•‡∏∞ date ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      if (!newEvent.start || !newEvent.end || !newEvent.date) {
        console.error("‚ùå Missing required fields:", newEvent);
        throw new Error("Missing required fields: start, end, or date");
      }

      // console.log("üîç Sending data to API:", JSON.stringify(newEvent, null, 2));

      const response = await EventService.AddEvent(newEvent);

      return response;
    } catch (error) {
      console.error("‚ùå Error saving event to DB:", error.message);
      throw error;
    }
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  const generateTemporaryId = () => {
    return "_" + Math.random().toString(36).substr(2, 9); // ‡∏™‡∏£‡πâ‡∏≤‡∏á id ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
  };

  const handleAddEvent = (arg) => {
    Swal.fire({
      title: "Enter for your event : ",
      customClass: "swal-wide",
      html: `

      <label for="editTitle">Title : </label>

      <input id="eventTitle" type="text" class="swal2-input"  placeholder="Event Title"  style="margin-bottom: 1rem; width: 250px"> <br>


        <label for="fontSize">Font Size:</label><br>
        <select id="fontSize" class="swal2-input">
        
          <option selected disabled>${defaultFontSize}</option>
          <option value="8">8</option>
          <option value="9">9</option>
          <option value="10">10</option>
          <option value="11">11</option>
          <option value="12" >12</option>
          <option value="14">14</option>
          <option value="16">16</option>
          <option value="18">18</option>
          <option value="20">20</option>
          <option value="22">22</option>
          <option value="24">24</option>
          <option value="26">26</option>
          <option value="28">28</option>
          <option value="36">36</option>
          <option value="48">48</option>
          <option value="72">72</option>
        </select><br><br>

        <label for="textColorPicker">Text Color:</label><br>
        <input id="textColorPicker" type="color" value="${defaultTextColor}" style="margin-bottom: 1rem;"><br>
  
        <label for="backgroundColorPicker">Background Color:</label><br>
        <input id="backgroundColorPicker" type="color" value="${defaultBackgroundColor}" style="margin-bottom: 1rem;"><br>
  
        <label for="start">Start:</label>
        <input id="start" type="date" class="swal2-input" value="${arg.dateStr}" style="margin-bottom: 1rem;"><br>
  
        <label for="end">End:</label>
        <input id="end" type="date" class="swal2-input"  value="${arg.dateStr}" style="margin-bottom: 1rem;"><br>

        <br><br><br>


  
      `,
      showCancelButton: true,
      confirmButtonText: "Save",
      cancelButtonText: "Cancel",
      didOpen: () => {
        const textColorPicker =
          Swal.getPopup().querySelector("#textColorPicker");
        textColorPicker.setAttribute("value", defaultTextColor);
        const backgroundColorPicker = Swal.getPopup().querySelector(
          "#backgroundColorPicker"
        );
        backgroundColorPicker.setAttribute("value", defaultBackgroundColor);
      },
      preConfirm: () => {
        const start = document.getElementById("start").value;
        const end = document.getElementById("end").value;

        // const startTime = document.getElementById("startTime").value;
        // const endTime = document.getElementById("endTime").value;

        const title = document.getElementById("eventTitle").value;
        const backgroundColor = document.getElementById(
          "backgroundColorPicker"
        ).value;
        const textColor = document.getElementById("textColorPicker").value;
        const fontSize = document.getElementById("fontSize").value;
        if (!title) {
          Swal.showValidationMessage("Please enter a title");
        }

        return {
          title,
          backgroundColor,
          textColor,
          fontSize,
          start,
          end,
        };
      },
    }).then(async (result) => {
      if (result.isConfirmed) {
        const { title, backgroundColor, textColor, fontSize, start, end } =
          result.value;

        const newEnd = moment(end).add(1, "days");
        const newEvent = {
          title,
          date: arg.dateStr,
          backgroundColor,
          textColor,
          fontSize,
          start,
          end: newEnd.format("YYYY-MM-DD"),
        };
        setEvents([...events, newEvent]); // Update local state
        await saveEventToDB(newEvent); // Save event to database
        setDefaultTextColor(textColor);
        setDefaultBackgroundColor(backgroundColor);
        setDefaultFontSize(fontSize);
        fetchEventsFromDB(); // Fetch events from database
      }
    });
  };

  const handleEditEvent = (eventInfo) => {
    const inputBackgroundColor = document.createElement("input");
    inputBackgroundColor.type = "color";
    inputBackgroundColor.value = eventInfo.event.backgroundColor;

    const inputTextColor = document.createElement("input");
    inputTextColor.type = "color";
    inputTextColor.value = eventInfo.event.textColor;

    const eventId = eventInfo.event.id;
    const eventTitle = eventInfo.event.title;

    const eventFontSize = eventInfo.event.extendedProps.fontSize;

    const eventStart = moment(eventInfo.event.start);
    const eventEnd = moment(eventInfo.event.end);

    const eventAllDay = eventInfo.event.allDay;

    const htmlEdit = `
    <input id="editTitle" class="swal2-input" type="text" value="${eventTitle}" 
    style="margin-bottom: 1rem; width: 250px"><i id="copyEventDetails" title="Copied to clipboard!" class="fas fa-copy"></i>
    
    <br>

    <label for="editFontSize">Font Size : </label><br>
    <select id="editFontSize" class="swal2-input">
      <option selected disabled>${eventFontSize}</option>
      <option value="8">8</option>
      <option value="9">9</option>
      <option value="10">10</option>
      <option value="11">11</option>
      <option value="12">12</option>
      <option value="14">14</option>
      <option value="16">16</option>
      <option value="18">18</option>
      <option value="20">20</option>
      <option value="22">22</option>
      <option value="24">24</option>
      <option value="26">26</option>
      <option value="28">28</option>
      <option value="36">36</option>
      <option value="48">48</option>
      <option value="72">72</option>
    </select><br><br>

    <label for="editBackgroundColor">Background Color : </label><br>
    <div id="backgroundColorPickerContainer"></div><br>

    <label for="editTextColor">Text Color : </label><br>
    <div id="textColorPickerContainer" class="swal2-input"></div>

    <label for="editStart">Start : </label>
    <input id="editStart" type="datetime-local" class="swal2-input" value="${eventStart.format(
      "YYYY-MM-DDTHH:mm"
    )}" style="margin-bottom: 1rem;"><br>

    <label for="fakeEditEnd">End :</label>
    <input id="fakeEditEnd" type="datetime-local" class="swal2-input" value="${
      eventAllDay
        ? moment(eventEnd).subtract(1, "days").format("YYYY-MM-DDTHH:mm")
        : eventEnd.format("YYYY-MM-DDTHH:mm")
    }" style="margin-bottom: 1rem;"><br>

    <input id="editEnd" type="datetime-local" class="swal2-input" style="display: none; margin-bottom: 1rem;"><br>
<span style='color:red'; font-size: 2px>‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ All-Day ‡πÄ‡∏õ‡πá‡∏ô False ‡∏Å‡πà‡∏≠‡∏ô</span> <br><br>
    <label for="editAllDay">All-Day : </label>
    <select id="editAllDay" class="swal2-select">
      <option selected disabled>${eventAllDay}</option>
      <option value="true">True</option>
      <option value="false">False</option>
    </select><br><br>

   
  `;

    Swal.fire({
      title: eventTitle,
      html: htmlEdit,
      customClass: "swal-wide",
      didOpen: () => {
        document
          .getElementById("backgroundColorPickerContainer")
          .appendChild(inputBackgroundColor);
        document
          .getElementById("textColorPickerContainer")
          .appendChild(inputTextColor);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        document
          .getElementById("copyEventDetails")
          .addEventListener("click", () => {
            const details = `${eventTitle}`;
            copyToClipboard(details);

            Swal.fire({
              title: "Copied",
              icon: "success",
              showConfirmButton: false,
              timer: 1000,
            });
          });

        // Handle change event for fakeEditEnd and update editEnd value
        document
          .getElementById("fakeEditEnd")
          .addEventListener("change", (e) => {
            const newEndDate = moment(e.target.value); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ Moment ‡∏à‡∏≤‡∏Å string

            const formattedNewEnd = newEndDate.format("YYYY-MM-DDTHH:mm:ss"); // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà

            document.getElementById("editEnd").value = formattedNewEnd; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö editEnd
          });
      },
      showDenyButton: true,
      showCancelButton: true,
      confirmButtonColor: "#0ECC00",
      confirmButtonText: "Save Update",
      denyButtonText: `Delete Event`,
      preConfirm: () => {
        const title = document.getElementById("editTitle").value;
        const textColor = inputTextColor.value;
        const backgroundColor = inputBackgroundColor.value;
        const fontSize = document.getElementById("editFontSize").value;

        const isAllDay = document.getElementById("editAllDay").value === "true";

        const start = moment(
          document.getElementById("editStart").value
        ).toISOString();
        let end = document.getElementById("editEnd").value;

        if (end === "null" || end === "") {
          // If end is null or empty, set end to original event end
          end = eventEnd.toISOString();
        } else {
          if (!isAllDay) {
            // Convert end to datetime format
            end = moment(end).toISOString();
          } else {
            end = moment(end).add(1, "days").toISOString();
          }
        }

        if (!title) {
          Swal.showValidationMessage("Please enter a title");
        }

        return {
          id: eventId,
          title,
          textColor,
          backgroundColor,
          fontSize,
          start,
          end,
          allDay: isAllDay,
        };
      },
    }).then(async (result) => {
      if (result.isConfirmed) {
        setLoading(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        const {
          id,
          title,
          textColor,
          backgroundColor,
          fontSize,
          start,
          end,
          // allDay,
        } = result.value;

        const updatedEvent = {
          title,
          textColor,
          backgroundColor,
          fontSize,
          start,
          end,
          // allDay,
        };

        const updatedEvents = await EventService.UpdateEvent(id, updatedEvent);

        setEvents(updatedEvents);

        fetchEventsFromDB();

        setLoading(false); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        Swal.fire({
          title: "Updated Successfully",
          icon: "success",
          showConfirmButton: false,
          timer: 1000,
        });
      } else if (result.isDenied) {
        handleDeleteEvent(eventId);
      }
    });
  };

  const handleEventDrop = async (arg) => {
    const event = arg.event;

    const start = moment(event.startStr);
    const end = moment(event.endStr);

    let newEnd;

    if (start.isSame(end, "day")) {
      newEnd = end;
    } else {
      newEnd = end.subtract(1, "days");
    }

    const updatedEvent = {
      id: event.id,
      title: event.title,
      textColor: event.textColor,
      backgroundColor: event.backgroundColor,
      fontSize: event.extendedProps.fontSize.toString(),
      start: event.startStr,
      end: event.endStr, // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö allDay ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î end
      allDay: event.allDay,
    };

    try {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

      const updatedEvents = await EventService.UpdateEvent(
        event.id,
        updatedEvent
      );

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï events ‡πÉ‡∏ô state ‡∏Ç‡∏≠‡∏á React component

      setEvents(updatedEvents);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      fetchEventsFromDB();

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      // Swal.fire("Event Updated", "", "success");
    } catch (error) {
      console.error("Error updating event:", error);
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
      Swal.fire("Error", "Failed to update event", "error");
    }
  };

  const handleEventResize = async (arg) => {
    const event = arg.event;

    const start = moment(event.startStr);
    const end = moment(event.endStr);

    let newEnd;

    if (start.isSame(end, "day")) {
      newEnd = end; // ‡πÉ‡∏ä‡πâ end ‡∏ï‡∏£‡∏á‡πÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    } else {
      newEnd = end;
    }

    const updatedEvent = {
      id: event.id,
      title: event.title,
      textColor: event.textColor,
      backgroundColor: event.backgroundColor,
      fontSize: event.extendedProps.fontSize.toString(),
      start: event.startStr,
      end: event.allDay ? newEnd.format("YYYY-MM-DD: HH:mm") : newEnd.format(), // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö allDay ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î end
      allDay: event.allDay,
    };

    const updatedEvents = await EventService.UpdateEvent(
      event.id,
      updatedEvent
    );

    setEvents(updatedEvents);

    fetchEventsFromDB();

    // Swal.fire("Event Updated", "", "success");
  };

  const handleDeleteEvent = (id) => {
    try {
      Swal.fire({
        title: "Are you sure?",
        text: "You won't be able to revert this!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, delete it!",
      }).then(async (result) => {
        if (result.isConfirmed) {
          setLoading(true); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

          // Send DELETE request to server with event ID
          await EventService.DeleteEvent(id);
          // Update events state after deletion
          const updatedEvents = events.filter((event) => event._id !== id);
          setEvents(updatedEvents);
          await fetchEventsFromDB();

          setLoading(false);

          // Swal.fire({
          //   title: "Deleted!",
          //   text: "Your file has been deleted.",
          //   icon: "success",
          // });
        }
      });
    } catch (error) {
      console.error("Error deleting event:", error);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const handleLineNotify = () => {
    const html = `
    <label for="description">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ô‡∏µ‡πâ : </label> <br>
    <input id="description" class="swal2-input"  type="text"  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"
    style="margin-bottom: 2rem width: auto"> <br /> 
    
    
   
  `;
    try {
      Swal.fire({
        title: "‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà Line Notify",
        icon: "question",
        html: html,
        width: "475px",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Confirm",

        preConfirm: () => {
          const description = document.getElementById("description").value;

          return {
            description,
          };
        },
      }).then(async (result) => {
        if (result.isConfirmed) {
          const description = result.value;

          console.log(description);
          await EventService.LineNotify(description);

          Swal.fire({
            title: "‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Line ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            icon: "success",
          });
        }
      });

      // .then(async (result) => {
      //   if (result.isConfirmed) {
      //     await EventService.LineNotify();
      //     Swal.fire({
      //       title: "‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Line ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
      //       icon: "success",
      //     });
      //   }
      // });
    } catch (error) {
      console.error("Error deleting event:", error);
    }
  };

  const calendarRef = useRef(null);

  const options = {
    // default is `save`
    method: "save",
    // default is Resolution.MEDIUM = 3, which should be enough, higher values
    // increases the image quality but also the size of the PDF, so be careful
    // using values higher than 10 when having multiple pages generated, it
    // might cause the page to crash or hang.
    resolution: Resolution.HIGH,
    page: {
      // margin is in MM, default is Margin.NONE = 0
      margin: Margin.SMALL,
      // default is 'A4'
      format: "a4",
      // default is 'portrait'
      orientation: "portrait",
    },
    canvas: {
      // default is 'image/jpeg' for better size performance
      mimeType: "image/png",
      qualityRatio: 1,
    },
    // Customize any value passed to the jsPDF instance and html2canvas
    // function. You probably will not need this and things can break,
    // so use with caution.
    overrides: {
      // see https://artskydj.github.io/jsPDF/docs/jsPDF.html for more options
      pdf: {
        compress: true,
      },
      // see https://html2canvas.hertzen.com/configuration for more options
      canvas: {
        useCORS: true,
      },
    },
  };

  const generatePdf = async () => {
    setLoading(true);

    try {
      const getTargetElement = () => document.getElementById("content-id");

      await generatePDF(getTargetElement, options);
      setLoading(false);
    } catch (error) {
      console.log(error);
    }
  };

  const [currentPage, setCurrentPage] = useState(1);
  const [eventsPerPage, setEventsPerPage] = useState(8); // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô event ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    const updateEventsPerPage = () => {
      if (window.innerWidth < 768) {
        setEventsPerPage(5); // ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å
      } else {
        setEventsPerPage(8); // ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà
      }
    };

    updateEventsPerPage(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    window.addEventListener("resize", updateEventsPerPage); // ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î

    return () => window.removeEventListener("resize", updateEventsPerPage); // ‡∏•‡∏ö event listener ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
  }, []);

  const sortedEvents = [...eventReceive].sort((a, b) => {
    const dateA = a.createdAt
      ? moment(a.createdAt)
      : a._id
      ? moment(a._id?.toString().substring(0, 8), "hex")
      : moment(0);

    const dateB = b.createdAt
      ? moment(b.createdAt)
      : b._id
      ? moment(b._id?.toString().substring(0, 8), "hex")
      : moment(0);

    return dateB.diff(dateA); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
  });

  // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
  const filteredEvents = sortedEvents.filter((event) =>
    event.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Pagination ‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
  const totalPages = Math.ceil(filteredEvents.length / eventsPerPage);
  const startIndex = (currentPage - 1) * eventsPerPage;
  const endIndex = startIndex + eventsPerPage;
  const paginatedEvents = filteredEvents.slice(startIndex, endIndex);

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô totalPages ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  useEffect(() => {
    if (currentPage > totalPages && totalPages > 0) {
      setCurrentPage(totalPages);
    }
  }, [filteredEvents, totalPages, currentPage]);


  return (
    <div>
      <Row className="flex-wrap mb-3 d-flex justify-content-center justify-content-md-between">
        <Col className="col-12 col-md-5 col-lg">
          <button className="btn btn-sm btn-danger" onClick={generatePdf}>
            <FontAwesomeIcon icon={faFilePdf} /> ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
          </button>
          <CSVLink
            data={
              events
                ? Object.values(events)
                    .sort((a, b) => new Date(a.start) - new Date(b.start)) // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
                    .map((event) => ({
                      Date: moment(event.start).format("YYYY-MM-DD"), // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                      Title: event.title, // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå

                      AllDay: event.allDay ? "Yes" : "No", // ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô
                    }))
                : null
            }
            filename={"events.csv"}
          >
            <button className="btn btn-sm btn-success mx-1 m-2 ">
              <FontAwesomeIcon icon={faFileExcel} /> ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel
            </button>
          </CSVLink>

          <button
            className="btn btn-sm btn-secondary mx-1 "
            onClick={handleLineNotify}
          >
            <FontAwesomeIcon icon={faBell} /> LINE NOTIFY
          </button>
        </Col>
      </Row>

      <div
        className="card p-2 mb-4 mt-4"
        style={{ background: "#f8f9fa", borderRadius: "8px", width: "100%" }}
      >
        <h5 className="mb-3">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</h5>
        <form onSubmit={handleAddEventReceive} className="d-flex gap-2 p-2">
          <input
            type="text"
            className="form-control form-control-sm"
            placeholder="Enter event title"
            value={newEventTitle}
            onChange={(e) => setNewEventTitle(e.target.value)}
            style={{ width: "100%", fontSize: "14px", padding: "6px" }} // ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢ input ‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
          />
          <button
            type="submit"
            className="btn btn-primary btn-sm"
            style={{
              fontSize: "14px",
              padding: "6px 12px",
              whiteSpace: "nowrap",
            }}
          >
            Add Event
          </button>
        </form>
      </div>

      <div
        id="external-events"
        style={{ padding: "8px", background: "#f8f9fa", width: "100%" }}
        className="mb-4"
      >
        <h5 className="mb-2 p-2">‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á</h5>

        {/* üîç ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
        <div className="input-group mb-2 p-2">
          <span className="input-group-text bg-white border border-secondary">
            <FontAwesomeIcon icon={faSearch} className="text-muted" />
          </span>
          <input
            type="search"
            className="form-control form-control-sm border border-secondary"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            style={{ fontSize: "14px", padding: "6px" }}
          />
        </div>
        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏° Pagination */}
        <div className="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-2 p-2">
          {paginatedEvents.map((event) => (
            <div
              key={event._id || event.id}
              className="col d-flex align-items-center gap-2 mb-2"
            >
              {/* üîπ ‡∏Å‡∏•‡πà‡∏≠‡∏á Event */}
              <div
                className="fc-event flex-grow-1 text-white d-flex align-items-center justify-content-between px-3 py-2"
                data-event-id={event._id || event.id}
                onClick={() => handleAddEventToCalendar(event)}
                style={{
                  background: event.backgroundColor || "#0c49ac",
                  borderRadius: "5px",
                  fontSize: "11px",
                  width: "100%",
                  overflow: "hidden",
                  textAlign: "center",
                  cursor: "pointer",
                }}
              >
                <span>{event.title}</span>
              </div>

              {/* üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö */}
              <button
                className="btn btn-danger btn-sm d-flex align-items-center justify-content-center"
                onClick={() => handleDeleteEventReceive(event._id || event.id)}
                style={{
                  width: "25px",
                  height: "25px",
                  borderRadius: "50%",
                }}
              >
                <FontAwesomeIcon icon={faTimes} className="text-white" />
              </button>
            </div>
          ))}
        </div>

        {/* ‚úÖ Pagination Controls ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
        {totalPages > 1 && (
          <div className="d-flex justify-content-center mt-2">
            <button
              className="btn btn-outline-primary btn-sm me-1"
              onClick={() => setCurrentPage(currentPage - 1)}
              disabled={currentPage === 1}
            >
              ¬´
            </button>
            <span className="mx-1">
              {currentPage} / {totalPages}
            </span>
            <button
              className="btn btn-outline-primary btn-sm ms-1"
              onClick={() => setCurrentPage(currentPage + 1)}
              disabled={currentPage === totalPages}
            >
              ¬ª
            </button>
          </div>
        )}
      </div>
      <div id="content-id" style={{ flex: 1, width: "100%" }}>
        <FullCalendar
          ref={calendarRef}
          plugins={[
            dayGridPlugin,
            interactionPlugin,
            timeGridPlugin,
            momentTimezonePlugin,
            listPlugin,
          ]}
          initialView="dayGridMonth"
          selectable={true}
          editable={true}
          droppable={true}
          eventReceive={handleEventReceive}
          events={events}
          dateClick={handleAddEvent}
          eventDrop={handleEventDrop}
          eventResize={handleEventResize}
          eventClick={handleEditEvent}
          allDaySlot={true}
          nowIndicator={true}
          selectMirror={true}
          weekends={true}
          contentHeight="auto"
          headerToolbar={{
            left: "prev,next",
            center: "title",
            right: "today",
          }}
          footerToolbar={{
            right: "dayGridMonth,timeGridWeek,timeGridDay,listWeek",
          }}
          customButtons={{
            prev: {
              text: "‚Äπ",
              click: () => calendarRef.current.getApi().prev(),
            },
            next: {
              text: "‚Ä∫",
              click: () => calendarRef.current.getApi().next(),
            },
            today: {
              text: "Today",
              click: () => calendarRef.current.getApi().today(),
            },
          }}
          dayMaxEventRows={true}
          views={{
            listWeek: { dayMaxEventRows: window.innerWidth >= 576 ? 7 : 5 },
            dayGridMonth: { dayMaxEventRows: window.innerWidth >= 576 ? 7 : 5 },
            timeGridWeek: { dayMaxEventRows: window.innerWidth >= 576 ? 7 : 5 },
            timeGridDay: { dayMaxEventRows: window.innerWidth >= 576 ? 7 : 5 },
          }}
          dayCellDidMount={(info) => {
            const date = info.date;
            const isSaturday = date.getUTCDay() === 5;
            const isSunday = date.getUTCDay() === 6;

            if (isSaturday || isSunday) {
              info.el.style.backgroundColor = "#FFFFF4";
            }
          }}
        />
        <style>
          {`
      @media (max-width: 768px) {
        .fc-header-toolbar {
          display: flex;
          flex-direction: column;
          width: 100%;
          gap: 8px;
        }
        .fc-toolbar-chunk {
          display: flex;
          justify-content: space-between;
          width: 100%;
        }
        .fc-toolbar-title {
          flex: 1;
          text-align: center;
          font-size: 1.5em;
          margin: 0;
        }
        .fc-button {
          flex: 1;
          min-width: 0;
          margin: 2px;
        }
        .fc-button-group {
          display: flex;
          width: 100%;
        }
        .fc-button-group .fc-button {
          flex: 1;
        }
        .fc-footer-toolbar {
          display: flex;
          justify-content: center;
          width: 100%;
          margin-top: 5px;
        }
      }
    `}
        </style>
      </div>

      {loading && (
        <div className="loading-overlay">
          <ThreeDots type="ThreeDots" color="#007bff" height={50} width={50} />
        </div>
      )}
    </div>
  );
}

export default EventCalendar;
