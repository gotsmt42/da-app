// productService.js
import API from "../API/axiosInstance";
import AuthService from "./authService";

const EventReceiveService = {
  async getEvents() {
    
    try {
      const userData = await AuthService.getUserData(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞ Token
      if (userData) {
        // const response = await API.get(`/product?search=${searchTerm}`); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        const response = await API.get(`/eventReceive`); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

        return response.data;
      }
    } catch (error) {
      console.error("Error fetching user events:", error);
      throw error;
    }
  },


  async AddEvent(newEvent) {
    try {
      const userData = await AuthService.getUserData(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞ Token

      if (userData) {
        const response = await API.post(`/eventReceive`, newEvent); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

        return response.data;
      }
    } catch (error) {
      console.error("Error fetching Event:", error);
      throw error;
    }
  },

  async UpdateEvent(id, updatedEvent) {
    try {
      const userData = await AuthService.getUserData(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞ Token

      if (userData) {
        const response = await API.put(`/eventReceive/${id}`, updatedEvent); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

        return response.data;
      }
    } catch (error) {
      console.error("Error fetching user event:", error);
      throw error;
    }
  },

  async DeleteEvent(id) {
    try {
      console.log(`üóë Attempting to delete event ID: ${id}`);
  
      const userData = await AuthService.getUserData();
      if (!userData) throw new Error("‚ùå User not authenticated");
  
      const response = await API.delete(`/eventReceive/${id}`);
  
      console.log("‚úÖ Delete Event Success:", response.data);
      return response; // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ response ‡πÄ‡∏ï‡πá‡∏°‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ `deleteEventFromDB` ‡πÄ‡∏ä‡πá‡∏Å `status`
    } catch (error) {
      console.error("‚ùå Error deleting event:", error.response?.data || error);
      throw error;
    }
  }
  
  

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï, ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
};

export default EventReceiveService;
